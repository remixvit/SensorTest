ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADC_Init,"ax",%progbits
  18              		.align	1
  19              		.global	ADC_Init
  20              		.code	16
  21              		.thumb_func
  22              		.type	ADC_Init, %function
  23              	ADC_Init:
  24              	.LFB1:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 2


  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000000u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  72:.\Generated_Source\PSoC4/ADC.c **** }
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 3


  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  26              		.loc 1 95 0
  27              		.cfi_startproc
  28 0000 10B5     		push	{r4, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 4, -8
  31              		.cfi_offset 14, -4
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 4


 141:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC.c ****         };
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  32              		.loc 1 172 0
  33 0002 0E20     		mov	r0, #14
  34 0004 0321     		mov	r1, #3
  35 0006 FFF7FEFF 		bl	CyIntSetPriority
  36              	.LVL0:
 173:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  37              		.loc 1 173 0
  38 000a 0E20     		mov	r0, #14
  39 000c 1E49     		ldr	r1, .L5
  40 000e FFF7FEFF 		bl	CyIntSetVector
  41              	.LVL1:
 174:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC.c **** 
 176:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
  42              		.loc 1 177 0
  43 0012 0122     		mov	r2, #1
  44 0014 1D4B     		ldr	r3, .L5+4
  45 0016 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
  46              		.loc 1 180 0
  47 0018 1D4B     		ldr	r3, .L5+8
  48 001a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 5


 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  49              		.loc 1 178 0
  50 001c 002B     		cmp	r3, #0
  51 001e 01DB     		blt	.L3
  52 0020 1C49     		ldr	r1, .L5+12
  53 0022 00E0     		b	.L2
  54              	.L3:
  55 0024 1C49     		ldr	r1, .L5+16
  56              	.L2:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  57              		.loc 1 178 0 is_stmt 0 discriminator 4
  58 0026 1D4A     		ldr	r2, .L5+20
 181:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 183:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 184:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 185:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 186:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 187:.\Generated_Source\PSoC4/ADC.c ****     
 188:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
  59              		.loc 1 190 0 is_stmt 1 discriminator 4
  60 0028 8020     		mov	r0, #128
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  61              		.loc 1 178 0 discriminator 4
  62 002a 1368     		ldr	r3, [r2]
 191:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 194:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 198:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 199:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
  63              		.loc 1 199 0 discriminator 4
  64 002c 0124     		mov	r4, #1
 178:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
  65              		.loc 1 178 0 discriminator 4
  66 002e 0B43     		orr	r3, r1
  67 0030 1360     		str	r3, [r2]
 182:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
  68              		.loc 1 182 0 discriminator 4
  69 0032 1B4A     		ldr	r2, .L5+24
  70 0034 1B4B     		ldr	r3, .L5+28
 185:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
  71              		.loc 1 185 0 discriminator 4
  72 0036 1C49     		ldr	r1, .L5+32
 182:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
  73              		.loc 1 182 0 discriminator 4
  74 0038 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
  75              		.loc 1 183 0 discriminator 4
  76 003a 1C4A     		ldr	r2, .L5+36
  77 003c 1C4B     		ldr	r3, .L5+40
 190:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 6


  78              		.loc 1 190 0 discriminator 4
  79 003e 4002     		lsl	r0, r0, #9
 183:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
  80              		.loc 1 183 0 discriminator 4
  81 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
  82              		.loc 1 184 0 discriminator 4
  83 0042 0023     		mov	r3, #0
  84 0044 1B4A     		ldr	r2, .L5+44
 200:.\Generated_Source\PSoC4/ADC.c **** 
 201:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC.c **** 
 205:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 207:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 208:.\Generated_Source\PSoC4/ADC.c ****     
 209:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:.\Generated_Source\PSoC4/ADC.c ****     #else
 216:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC.c ****         #else
 220:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 221:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 222:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC.c ****     
 226:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC.c **** 
 232:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 233:.\Generated_Source\PSoC4/ADC.c ****     {
 234:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 235:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 237:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC.c ****         
 239:.\Generated_Source\PSoC4/ADC.c ****         
 240:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC.c ****         */
 244:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 7


 248:.\Generated_Source\PSoC4/ADC.c **** 
 249:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 254:.\Generated_Source\PSoC4/ADC.c **** 
 255:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 256:.\Generated_Source\PSoC4/ADC.c ****             {
 257:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 258:.\Generated_Source\PSoC4/ADC.c ****             }
 259:.\Generated_Source\PSoC4/ADC.c **** 
 260:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 261:.\Generated_Source\PSoC4/ADC.c ****             {
 262:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 263:.\Generated_Source\PSoC4/ADC.c ****             }
 264:.\Generated_Source\PSoC4/ADC.c ****         }
 265:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC.c ****             else
 267:.\Generated_Source\PSoC4/ADC.c ****             {
 268:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:.\Generated_Source\PSoC4/ADC.c **** 
 270:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:.\Generated_Source\PSoC4/ADC.c ****                 {
 272:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:.\Generated_Source\PSoC4/ADC.c ****                 }
 274:.\Generated_Source\PSoC4/ADC.c **** 
 275:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:.\Generated_Source\PSoC4/ADC.c ****                 {
 277:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:.\Generated_Source\PSoC4/ADC.c ****                 }
 279:.\Generated_Source\PSoC4/ADC.c ****             }
 280:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC.c **** 
 282:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 283:.\Generated_Source\PSoC4/ADC.c ****         {
 284:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 285:.\Generated_Source\PSoC4/ADC.c ****         }
 286:.\Generated_Source\PSoC4/ADC.c ****         else
 287:.\Generated_Source\PSoC4/ADC.c ****         {
 288:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 289:.\Generated_Source\PSoC4/ADC.c ****         }
 290:.\Generated_Source\PSoC4/ADC.c **** 
 291:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 292:.\Generated_Source\PSoC4/ADC.c ****         {
 293:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC.c ****             #else
 298:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 299:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC.c ****         }
 301:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC.c ****         {
 303:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 8


 305:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:.\Generated_Source\PSoC4/ADC.c ****             #else
 307:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 308:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:.\Generated_Source\PSoC4/ADC.c ****         }
 310:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 312:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 313:.\Generated_Source\PSoC4/ADC.c ****     }
 314:.\Generated_Source\PSoC4/ADC.c **** }
  85              		.loc 1 314 0 discriminator 4
  86              		@ sp needed
 184:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
  87              		.loc 1 184 0 discriminator 4
  88 0046 1360     		str	r3, [r2]
 185:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
  89              		.loc 1 185 0 discriminator 4
  90 0048 1B4A     		ldr	r2, .L5+48
  91 004a 0A60     		str	r2, [r1]
 186:.\Generated_Source\PSoC4/ADC.c ****     
  92              		.loc 1 186 0 discriminator 4
  93 004c 1B49     		ldr	r1, .L5+52
  94 004e 0A60     		str	r2, [r1]
 190:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
  95              		.loc 1 190 0 discriminator 4
  96 0050 1B49     		ldr	r1, .L5+56
  97 0052 0A68     		ldr	r2, [r1]
  98 0054 0243     		orr	r2, r0
  99 0056 0A60     		str	r2, [r1]
 202:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 100              		.loc 1 202 0 discriminator 4
 101 0058 0221     		mov	r1, #2
 197:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 102              		.loc 1 197 0 discriminator 4
 103 005a 1A4A     		ldr	r2, .L5+60
 206:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 104              		.loc 1 206 0 discriminator 4
 105 005c 1A48     		ldr	r0, .L5+64
 197:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 106              		.loc 1 197 0 discriminator 4
 107 005e 1360     		str	r3, [r2]
 198:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 108              		.loc 1 198 0 discriminator 4
 109 0060 1A4A     		ldr	r2, .L5+68
 110 0062 1360     		str	r3, [r2]
 199:.\Generated_Source\PSoC4/ADC.c **** 
 111              		.loc 1 199 0 discriminator 4
 112 0064 1A4A     		ldr	r2, .L5+72
 113 0066 1460     		str	r4, [r2]
 202:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 114              		.loc 1 202 0 discriminator 4
 115 0068 1A4A     		ldr	r2, .L5+76
 116 006a 1160     		str	r1, [r2]
 206:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 117              		.loc 1 206 0 discriminator 4
 118 006c 0268     		ldr	r2, [r0]
 119              	.LVL2:
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 9


 207:.\Generated_Source\PSoC4/ADC.c ****     
 120              		.loc 1 207 0 discriminator 4
 121 006e 1A49     		ldr	r1, .L5+80
 122 0070 0A40     		and	r2, r1
 123              	.LVL3:
 213:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 124              		.loc 1 213 0 discriminator 4
 125 0072 2243     		orr	r2, r4
 126              	.LVL4:
 226:.\Generated_Source\PSoC4/ADC.c **** 
 127              		.loc 1 226 0 discriminator 4
 128 0074 0260     		str	r2, [r0]
 129              	.LVL5:
 253:.\Generated_Source\PSoC4/ADC.c **** 
 130              		.loc 1 253 0 discriminator 4
 131 0076 194A     		ldr	r2, .L5+84
 132 0078 1360     		str	r3, [r2]
 133              	.LVL6:
 298:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 134              		.loc 1 298 0 discriminator 4
 135 007a 194A     		ldr	r2, .L5+88
 136 007c 1380     		strh	r3, [r2]
 311:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 137              		.loc 1 311 0 discriminator 4
 138 007e 194A     		ldr	r2, .L5+92
 139 0080 194B     		ldr	r3, .L5+96
 140 0082 1A60     		str	r2, [r3]
 141              	.LVL7:
 142              		.loc 1 314 0 discriminator 4
 143 0084 10BD     		pop	{r4, pc}
 144              	.L6:
 145 0086 C046     		.align	2
 146              	.L5:
 147 0088 00000000 		.word	ADC_ISR
 148 008c 20001A40 		.word	1075445792
 149 0090 80031A40 		.word	1075446656
 150 0094 40020053 		.word	1392509504
 151 0098 40021053 		.word	1393558080
 152 009c 00001A40 		.word	1075445760
 153 00a0 8C000080 		.word	-2147483508
 154 00a4 04001A40 		.word	1075445764
 155 00a8 10001A40 		.word	1075445776
 156 00ac 0000FF07 		.word	134152192
 157 00b0 18001A40 		.word	1075445784
 158 00b4 1C001A40 		.word	1075445788
 159 00b8 02000200 		.word	131074
 160 00bc 14001A40 		.word	1075445780
 161 00c0 00031A40 		.word	1075446528
 162 00c4 28021A40 		.word	1075446312
 163 00c8 30001A40 		.word	1075445808
 164 00cc 38021A40 		.word	1075446328
 165 00d0 18021A40 		.word	1075446296
 166 00d4 000F1A40 		.word	1075449600
 167 00d8 FFFFFFDF 		.word	-536870913
 168 00dc 80001A40 		.word	1075445888
 169 00e0 00000000 		.word	ADC_offset
 170 00e4 204E0000 		.word	20000
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 10


 171 00e8 00000000 		.word	ADC_countsPer10Volt
 172              		.cfi_endproc
 173              	.LFE1:
 174              		.size	ADC_Init, .-ADC_Init
 175              		.section	.text.ADC_Enable,"ax",%progbits
 176              		.align	1
 177              		.global	ADC_Enable
 178              		.code	16
 179              		.thumb_func
 180              		.type	ADC_Enable, %function
 181              	ADC_Enable:
 182              	.LFB2:
 315:.\Generated_Source\PSoC4/ADC.c **** 
 316:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** *
 320:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 183              		.loc 1 331 0
 184              		.cfi_startproc
 185 0000 08B5     		push	{r3, lr}
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 3, -8
 188              		.cfi_offset 14, -4
 332:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 189              		.loc 1 332 0
 190 0002 064B     		ldr	r3, .L9
 191 0004 1A68     		ldr	r2, [r3]
 192 0006 002A     		cmp	r2, #0
 193 0008 07DB     		blt	.L7
 194              	.LBB4:
 195              	.LBB5:
 333:.\Generated_Source\PSoC4/ADC.c ****     {
 334:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 337:.\Generated_Source\PSoC4/ADC.c ****             {
 338:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC.c ****             }
 340:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC.c ****         
 342:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 196              		.loc 1 342 0
 197 000a 8021     		mov	r1, #128
 198 000c 1A68     		ldr	r2, [r3]
 199 000e 0906     		lsl	r1, r1, #24
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 11


 200 0010 0A43     		orr	r2, r1
 201 0012 1A60     		str	r2, [r3]
 343:.\Generated_Source\PSoC4/ADC.c ****         
 344:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 202              		.loc 1 345 0
 203 0014 0A20     		mov	r0, #10
 204 0016 FFF7FEFF 		bl	CyDelayUs
 205              	.LVL8:
 206              	.L7:
 207              	.LBE5:
 208              	.LBE4:
 346:.\Generated_Source\PSoC4/ADC.c ****     }
 347:.\Generated_Source\PSoC4/ADC.c **** }
 209              		.loc 1 347 0
 210              		@ sp needed
 211 001a 08BD     		pop	{r3, pc}
 212              	.L10:
 213              		.align	2
 214              	.L9:
 215 001c 00001A40 		.word	1075445760
 216              		.cfi_endproc
 217              	.LFE2:
 218              		.size	ADC_Enable, .-ADC_Enable
 219              		.section	.text.ADC_Start,"ax",%progbits
 220              		.align	1
 221              		.global	ADC_Start
 222              		.code	16
 223              		.thumb_func
 224              		.type	ADC_Start, %function
 225              	ADC_Start:
 226              	.LFB0:
  64:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
 227              		.loc 1 64 0
 228              		.cfi_startproc
 229 0000 10B5     		push	{r4, lr}
 230              		.cfi_def_cfa_offset 8
 231              		.cfi_offset 4, -8
 232              		.cfi_offset 14, -4
  66:.\Generated_Source\PSoC4/ADC.c ****     {
 233              		.loc 1 66 0
 234 0002 054C     		ldr	r4, .L13
 235 0004 2378     		ldrb	r3, [r4]
 236 0006 002B     		cmp	r3, #0
 237 0008 03D1     		bne	.L12
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
 238              		.loc 1 68 0
 239 000a FFF7FEFF 		bl	ADC_Init
 240              	.LVL9:
  69:.\Generated_Source\PSoC4/ADC.c ****     }
 241              		.loc 1 69 0
 242 000e 0123     		mov	r3, #1
 243 0010 2370     		strb	r3, [r4]
 244              	.L12:
  71:.\Generated_Source\PSoC4/ADC.c **** }
 245              		.loc 1 71 0
 246 0012 FFF7FEFF 		bl	ADC_Enable
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 12


 247              	.LVL10:
  72:.\Generated_Source\PSoC4/ADC.c **** 
 248              		.loc 1 72 0
 249              		@ sp needed
 250 0016 10BD     		pop	{r4, pc}
 251              	.L14:
 252              		.align	2
 253              	.L13:
 254 0018 00000000 		.word	.LANCHOR0
 255              		.cfi_endproc
 256              	.LFE0:
 257              		.size	ADC_Start, .-ADC_Start
 258              		.section	.text.ADC_Stop,"ax",%progbits
 259              		.align	1
 260              		.global	ADC_Stop
 261              		.code	16
 262              		.thumb_func
 263              		.type	ADC_Stop, %function
 264              	ADC_Stop:
 265              	.LFB3:
 348:.\Generated_Source\PSoC4/ADC.c **** 
 349:.\Generated_Source\PSoC4/ADC.c **** 
 350:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC.c **** *
 354:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC.c **** *
 361:.\Generated_Source\PSoC4/ADC.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC.c **** *
 364:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:.\Generated_Source\PSoC4/ADC.c **** {
 266              		.loc 1 366 0
 267              		.cfi_startproc
 367:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 268              		.loc 1 367 0
 269 0000 024A     		ldr	r2, .L16
 368:.\Generated_Source\PSoC4/ADC.c **** }
 270              		.loc 1 368 0
 271              		@ sp needed
 367:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 272              		.loc 1 367 0
 273 0002 1368     		ldr	r3, [r2]
 274 0004 5B00     		lsl	r3, r3, #1
 275 0006 5B08     		lsr	r3, r3, #1
 276 0008 1360     		str	r3, [r2]
 277              		.loc 1 368 0
 278 000a 7047     		bx	lr
 279              	.L17:
 280              		.align	2
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 13


 281              	.L16:
 282 000c 00001A40 		.word	1075445760
 283              		.cfi_endproc
 284              	.LFE3:
 285              		.size	ADC_Stop, .-ADC_Stop
 286              		.section	.text.ADC_StartConvert,"ax",%progbits
 287              		.align	1
 288              		.global	ADC_StartConvert
 289              		.code	16
 290              		.thumb_func
 291              		.type	ADC_StartConvert, %function
 292              	ADC_StartConvert:
 293              	.LFB4:
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** 
 371:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC.c **** *
 375:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC.c **** *
 384:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC.c **** *
 387:.\Generated_Source\PSoC4/ADC.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC.c **** *
 390:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:.\Generated_Source\PSoC4/ADC.c **** {
 294              		.loc 1 392 0
 295              		.cfi_startproc
 393:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 296              		.loc 1 394 0
 297 0000 8021     		mov	r1, #128
 298 0002 034A     		ldr	r2, .L19
 299 0004 4902     		lsl	r1, r1, #9
 300 0006 1368     		ldr	r3, [r2]
 395:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC.c **** 
 399:.\Generated_Source\PSoC4/ADC.c **** }
 301              		.loc 1 399 0
 302              		@ sp needed
 394:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 303              		.loc 1 394 0
 304 0008 0B43     		orr	r3, r1
 305 000a 1360     		str	r3, [r2]
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 14


 306              		.loc 1 399 0
 307 000c 7047     		bx	lr
 308              	.L20:
 309 000e C046     		.align	2
 310              	.L19:
 311 0010 04001A40 		.word	1075445764
 312              		.cfi_endproc
 313              	.LFE4:
 314              		.size	ADC_StartConvert, .-ADC_StartConvert
 315              		.section	.text.ADC_StopConvert,"ax",%progbits
 316              		.align	1
 317              		.global	ADC_StopConvert
 318              		.code	16
 319              		.thumb_func
 320              		.type	ADC_StopConvert, %function
 321              	ADC_StopConvert:
 322              	.LFB5:
 400:.\Generated_Source\PSoC4/ADC.c **** 
 401:.\Generated_Source\PSoC4/ADC.c **** 
 402:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC.c **** *
 406:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC.c **** *
 409:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC.c **** *
 412:.\Generated_Source\PSoC4/ADC.c **** * Return:
 413:.\Generated_Source\PSoC4/ADC.c **** *  None.
 414:.\Generated_Source\PSoC4/ADC.c **** *
 415:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC.c **** {
 323              		.loc 1 417 0
 324              		.cfi_startproc
 418:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 325              		.loc 1 419 0
 326 0000 024A     		ldr	r2, .L22
 327 0002 034B     		ldr	r3, .L22+4
 328 0004 1168     		ldr	r1, [r2]
 420:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC.c **** }
 329              		.loc 1 421 0
 330              		@ sp needed
 419:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 331              		.loc 1 419 0
 332 0006 0B40     		and	r3, r1
 333 0008 1360     		str	r3, [r2]
 334              		.loc 1 421 0
 335 000a 7047     		bx	lr
 336              	.L23:
 337              		.align	2
 338              	.L22:
 339 000c 04001A40 		.word	1075445764
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 15


 340 0010 FFFFFEFF 		.word	-65537
 341              		.cfi_endproc
 342              	.LFE5:
 343              		.size	ADC_StopConvert, .-ADC_StopConvert
 344              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 345              		.align	1
 346              		.global	ADC_IsEndConversion
 347              		.code	16
 348              		.thumb_func
 349              		.type	ADC_IsEndConversion, %function
 350              	ADC_IsEndConversion:
 351              	.LFB6:
 422:.\Generated_Source\PSoC4/ADC.c **** 
 423:.\Generated_Source\PSoC4/ADC.c **** 
 424:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC.c **** *
 428:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 436:.\Generated_Source\PSoC4/ADC.c **** *
 437:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC.c **** *
 445:.\Generated_Source\PSoC4/ADC.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC.c **** *
 449:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC.c **** {
 352              		.loc 1 451 0
 353              		.cfi_startproc
 354              	.LVL11:
 355 0000 10B5     		push	{r4, lr}
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 4, -8
 358              		.cfi_offset 14, -4
 359              		.loc 1 451 0
 360 0002 041C     		mov	r4, r0
 452:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 361              		.loc 1 452 0
 362 0004 0020     		mov	r0, #0
 363              	.LVL12:
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 16


 364              		.loc 1 454 0
 365 0006 A307     		lsl	r3, r4, #30
 366 0008 0AD0     		beq	.L29
 367              	.LVL13:
 368              	.L27:
 455:.\Generated_Source\PSoC4/ADC.c ****     {
 456:.\Generated_Source\PSoC4/ADC.c ****         do
 457:.\Generated_Source\PSoC4/ADC.c ****         {
 458:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 369              		.loc 1 458 0 discriminator 2
 370 000a 0122     		mov	r2, #1
 371 000c 0549     		ldr	r1, .L31
 372 000e 0B68     		ldr	r3, [r1]
 373 0010 1340     		and	r3, r2
 374 0012 181E     		sub	r0, r3, #0
 375              	.LVL14:
 459:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 376              		.loc 1 459 0 discriminator 2
 377 0014 02D1     		bne	.L26
 378              		.loc 1 459 0 is_stmt 0 discriminator 1
 379 0016 A307     		lsl	r3, r4, #30
 380 0018 F7D4     		bmi	.L27
 381 001a 01E0     		b	.L29
 382              	.L26:
 460:.\Generated_Source\PSoC4/ADC.c **** 
 461:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 462:.\Generated_Source\PSoC4/ADC.c ****         {
 463:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 383              		.loc 1 464 0 is_stmt 1
 384 001c 101C     		mov	r0, r2
 385              	.LVL15:
 386 001e 0A60     		str	r2, [r1]
 387              	.LVL16:
 388              	.L29:
 465:.\Generated_Source\PSoC4/ADC.c ****         }
 466:.\Generated_Source\PSoC4/ADC.c ****     }
 467:.\Generated_Source\PSoC4/ADC.c **** 
 468:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:.\Generated_Source\PSoC4/ADC.c ****         {
 471:.\Generated_Source\PSoC4/ADC.c ****             do
 472:.\Generated_Source\PSoC4/ADC.c ****             {
 473:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:.\Generated_Source\PSoC4/ADC.c **** 
 477:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:.\Generated_Source\PSoC4/ADC.c ****             {
 479:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:.\Generated_Source\PSoC4/ADC.c ****             }
 482:.\Generated_Source\PSoC4/ADC.c ****         }
 483:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:.\Generated_Source\PSoC4/ADC.c **** 
 485:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 486:.\Generated_Source\PSoC4/ADC.c **** }
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 17


 389              		.loc 1 486 0
 390              		@ sp needed
 391              	.LVL17:
 392 0020 10BD     		pop	{r4, pc}
 393              	.L32:
 394 0022 C046     		.align	2
 395              	.L31:
 396 0024 10021A40 		.word	1075446288
 397              		.cfi_endproc
 398              	.LFE6:
 399              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 400              		.section	.text.ADC_GetResult16,"ax",%progbits
 401              		.align	1
 402              		.global	ADC_GetResult16
 403              		.code	16
 404              		.thumb_func
 405              		.type	ADC_GetResult16, %function
 406              	ADC_GetResult16:
 407              	.LFB7:
 487:.\Generated_Source\PSoC4/ADC.c **** 
 488:.\Generated_Source\PSoC4/ADC.c **** 
 489:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC.c **** *
 493:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC.c **** *
 496:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC.c **** *
 500:.\Generated_Source\PSoC4/ADC.c **** * Return:
 501:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:.\Generated_Source\PSoC4/ADC.c **** *
 503:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC.c **** {
 408              		.loc 1 505 0
 409              		.cfi_startproc
 410              	.LVL18:
 411 0000 08B5     		push	{r3, lr}
 412              		.cfi_def_cfa_offset 8
 413              		.cfi_offset 3, -8
 414              		.cfi_offset 14, -4
 506:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:.\Generated_Source\PSoC4/ADC.c **** 
 508:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 415              		.loc 1 509 0
 416 0002 0028     		cmp	r0, #0
 417 0004 04D0     		beq	.L34
 418              		.loc 1 509 0 is_stmt 0 discriminator 1
 419 0006 0020     		mov	r0, #0
 420              	.LVL19:
 421 0008 FFF7FEFF 		bl	CyHalt
 422              	.LVL20:
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 18


 510:.\Generated_Source\PSoC4/ADC.c **** 
 511:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 512:.\Generated_Source\PSoC4/ADC.c ****     {
 513:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 514:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC.c ****     }
 516:.\Generated_Source\PSoC4/ADC.c ****     else
 517:.\Generated_Source\PSoC4/ADC.c ****     {
 518:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:.\Generated_Source\PSoC4/ADC.c ****         #else
 521:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 423              		.loc 1 521 0 is_stmt 1 discriminator 1
 424 000c 0020     		mov	r0, #0
 425 000e 02E0     		b	.L35
 426              	.LVL21:
 427              	.L34:
 513:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 428              		.loc 1 513 0
 429 0010 024B     		ldr	r3, .L37
 430 0012 1868     		ldr	r0, [r3]
 431              	.LVL22:
 432 0014 80B2     		uxth	r0, r0
 433              	.LVL23:
 434              	.L35:
 522:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC.c ****     }
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 435              		.loc 1 525 0
 436 0016 00B2     		sxth	r0, r0
 437              	.LVL24:
 526:.\Generated_Source\PSoC4/ADC.c **** }
 438              		.loc 1 526 0
 439              		@ sp needed
 440 0018 08BD     		pop	{r3, pc}
 441              	.L38:
 442 001a C046     		.align	2
 443              	.L37:
 444 001c 80011A40 		.word	1075446144
 445              		.cfi_endproc
 446              	.LFE7:
 447              		.size	ADC_GetResult16, .-ADC_GetResult16
 448              		.section	.text.ADC_SetChanMask,"ax",%progbits
 449              		.align	1
 450              		.global	ADC_SetChanMask
 451              		.code	16
 452              		.thumb_func
 453              		.type	ADC_SetChanMask, %function
 454              	ADC_SetChanMask:
 455              	.LFB8:
 527:.\Generated_Source\PSoC4/ADC.c **** 
 528:.\Generated_Source\PSoC4/ADC.c **** 
 529:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 19


 533:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC.c **** *
 536:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC.c **** *
 545:.\Generated_Source\PSoC4/ADC.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC.c **** {
 456              		.loc 1 550 0
 457              		.cfi_startproc
 458              	.LVL25:
 551:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 459              		.loc 1 551 0
 460 0000 0123     		mov	r3, #1
 461 0002 1840     		and	r0, r3
 462              	.LVL26:
 463 0004 014B     		ldr	r3, .L40
 552:.\Generated_Source\PSoC4/ADC.c **** }
 464              		.loc 1 552 0
 465              		@ sp needed
 551:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 466              		.loc 1 551 0
 467 0006 1860     		str	r0, [r3]
 468              		.loc 1 552 0
 469 0008 7047     		bx	lr
 470              	.L41:
 471 000a C046     		.align	2
 472              	.L40:
 473 000c 20001A40 		.word	1075445792
 474              		.cfi_endproc
 475              	.LFE8:
 476              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 477              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 478              		.align	1
 479              		.global	ADC_SetLowLimit
 480              		.code	16
 481              		.thumb_func
 482              		.type	ADC_SetLowLimit, %function
 483              	ADC_SetLowLimit:
 484              	.LFB9:
 553:.\Generated_Source\PSoC4/ADC.c **** 
 554:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC.c **** 
 556:.\Generated_Source\PSoC4/ADC.c **** 
 557:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 20


 560:.\Generated_Source\PSoC4/ADC.c ****     *
 561:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC.c ****     *
 564:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 566:.\Generated_Source\PSoC4/ADC.c ****     *
 567:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 568:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 569:.\Generated_Source\PSoC4/ADC.c ****     *
 570:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC.c ****     {
 573:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:.\Generated_Source\PSoC4/ADC.c ****     }
 575:.\Generated_Source\PSoC4/ADC.c **** 
 576:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC.c **** 
 578:.\Generated_Source\PSoC4/ADC.c **** 
 579:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC.c **** *
 583:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC.c **** *
 586:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:.\Generated_Source\PSoC4/ADC.c **** *
 589:.\Generated_Source\PSoC4/ADC.c **** * Return:
 590:.\Generated_Source\PSoC4/ADC.c **** *  None.
 591:.\Generated_Source\PSoC4/ADC.c **** *
 592:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC.c **** {
 485              		.loc 1 594 0
 486              		.cfi_startproc
 487              	.LVL27:
 595:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 488              		.loc 1 595 0
 489 0000 044A     		ldr	r2, .L43
 596:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 490              		.loc 1 596 0
 491 0002 80B2     		uxth	r0, r0
 492              	.LVL28:
 595:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 493              		.loc 1 595 0
 494 0004 1368     		ldr	r3, [r2]
 597:.\Generated_Source\PSoC4/ADC.c **** }
 495              		.loc 1 597 0
 496              		@ sp needed
 595:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 497              		.loc 1 595 0
 498 0006 1B0C     		lsr	r3, r3, #16
 499 0008 1B04     		lsl	r3, r3, #16
 500 000a 1360     		str	r3, [r2]
 596:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 21


 501              		.loc 1 596 0
 502 000c 1368     		ldr	r3, [r2]
 503 000e 1843     		orr	r0, r3
 504 0010 1060     		str	r0, [r2]
 505              		.loc 1 597 0
 506 0012 7047     		bx	lr
 507              	.L44:
 508              		.align	2
 509              	.L43:
 510 0014 18001A40 		.word	1075445784
 511              		.cfi_endproc
 512              	.LFE9:
 513              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 514              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 515              		.align	1
 516              		.global	ADC_SetHighLimit
 517              		.code	16
 518              		.thumb_func
 519              		.type	ADC_SetHighLimit, %function
 520              	ADC_SetHighLimit:
 521              	.LFB10:
 598:.\Generated_Source\PSoC4/ADC.c **** 
 599:.\Generated_Source\PSoC4/ADC.c **** 
 600:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC.c **** *
 604:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC.c **** *
 607:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:.\Generated_Source\PSoC4/ADC.c **** *
 610:.\Generated_Source\PSoC4/ADC.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC.c **** {
 522              		.loc 1 615 0
 523              		.cfi_startproc
 524              	.LVL29:
 616:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 525              		.loc 1 616 0
 526 0000 044B     		ldr	r3, .L46
 617:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 527              		.loc 1 617 0
 528 0002 0004     		lsl	r0, r0, #16
 529              	.LVL30:
 616:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 530              		.loc 1 616 0
 531 0004 1A68     		ldr	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC.c **** }
 532              		.loc 1 618 0
 533              		@ sp needed
 616:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 534              		.loc 1 616 0
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 22


 535 0006 92B2     		uxth	r2, r2
 536 0008 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 537              		.loc 1 617 0
 538 000a 1A68     		ldr	r2, [r3]
 539 000c 1043     		orr	r0, r2
 540 000e 1860     		str	r0, [r3]
 541              		.loc 1 618 0
 542 0010 7047     		bx	lr
 543              	.L47:
 544 0012 C046     		.align	2
 545              	.L46:
 546 0014 18001A40 		.word	1075445784
 547              		.cfi_endproc
 548              	.LFE10:
 549              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 550              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 551              		.align	1
 552              		.global	ADC_SetLimitMask
 553              		.code	16
 554              		.thumb_func
 555              		.type	ADC_SetLimitMask, %function
 556              	ADC_SetLimitMask:
 557              	.LFB11:
 619:.\Generated_Source\PSoC4/ADC.c **** 
 620:.\Generated_Source\PSoC4/ADC.c **** 
 621:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC.c **** *
 634:.\Generated_Source\PSoC4/ADC.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC.c **** *
 637:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC.c **** {
 558              		.loc 1 639 0
 559              		.cfi_startproc
 560              	.LVL31:
 640:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 561              		.loc 1 640 0
 562 0000 0123     		mov	r3, #1
 563 0002 1840     		and	r0, r3
 564              	.LVL32:
 565 0004 014B     		ldr	r3, .L49
 641:.\Generated_Source\PSoC4/ADC.c **** }
 566              		.loc 1 641 0
 567              		@ sp needed
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 23


 640:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 568              		.loc 1 640 0
 569 0006 1860     		str	r0, [r3]
 570              		.loc 1 641 0
 571 0008 7047     		bx	lr
 572              	.L50:
 573 000a C046     		.align	2
 574              	.L49:
 575 000c 38021A40 		.word	1075446328
 576              		.cfi_endproc
 577              	.LFE11:
 578              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 579              		.section	.text.ADC_SetSatMask,"ax",%progbits
 580              		.align	1
 581              		.global	ADC_SetSatMask
 582              		.code	16
 583              		.thumb_func
 584              		.type	ADC_SetSatMask, %function
 585              	ADC_SetSatMask:
 586              	.LFB12:
 642:.\Generated_Source\PSoC4/ADC.c **** 
 643:.\Generated_Source\PSoC4/ADC.c **** 
 644:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC.c **** *
 648:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC.c **** *
 651:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC.c **** *
 657:.\Generated_Source\PSoC4/ADC.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC.c **** *
 660:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC.c **** {
 587              		.loc 1 662 0
 588              		.cfi_startproc
 589              	.LVL33:
 663:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 590              		.loc 1 663 0
 591 0000 0123     		mov	r3, #1
 592 0002 1840     		and	r0, r3
 593              	.LVL34:
 594 0004 014B     		ldr	r3, .L52
 664:.\Generated_Source\PSoC4/ADC.c **** }
 595              		.loc 1 664 0
 596              		@ sp needed
 663:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 597              		.loc 1 663 0
 598 0006 1860     		str	r0, [r3]
 599              		.loc 1 664 0
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 24


 600 0008 7047     		bx	lr
 601              	.L53:
 602 000a C046     		.align	2
 603              	.L52:
 604 000c 28021A40 		.word	1075446312
 605              		.cfi_endproc
 606              	.LFE12:
 607              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 608              		.section	.text.ADC_SetOffset,"ax",%progbits
 609              		.align	1
 610              		.global	ADC_SetOffset
 611              		.code	16
 612              		.thumb_func
 613              		.type	ADC_SetOffset, %function
 614              	ADC_SetOffset:
 615              	.LFB13:
 665:.\Generated_Source\PSoC4/ADC.c **** 
 666:.\Generated_Source\PSoC4/ADC.c **** 
 667:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC.c **** *
 671:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC.c **** *
 677:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC.c **** *
 682:.\Generated_Source\PSoC4/ADC.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC.c **** *  None.
 684:.\Generated_Source\PSoC4/ADC.c **** *
 685:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC.c **** *
 688:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC.c **** {
 616              		.loc 1 690 0
 617              		.cfi_startproc
 618              	.LVL35:
 619 0000 38B5     		push	{r3, r4, r5, lr}
 620              		.cfi_def_cfa_offset 16
 621              		.cfi_offset 3, -16
 622              		.cfi_offset 4, -12
 623              		.cfi_offset 5, -8
 624              		.cfi_offset 14, -4
 625              		.loc 1 690 0
 626 0002 041C     		mov	r4, r0
 627 0004 0D1C     		mov	r5, r1
 691:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 628              		.loc 1 692 0
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 25


 629 0006 0028     		cmp	r0, #0
 630 0008 02D0     		beq	.L55
 631              		.loc 1 692 0 is_stmt 0 discriminator 1
 632 000a 0020     		mov	r0, #0
 633              	.LVL36:
 634 000c FFF7FEFF 		bl	CyHalt
 635              	.LVL37:
 636              	.L55:
 693:.\Generated_Source\PSoC4/ADC.c **** 
 694:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 637              		.loc 1 694 0 is_stmt 1
 638 0010 014B     		ldr	r3, .L59
 639 0012 6400     		lsl	r4, r4, #1
 640              	.LVL38:
 641 0014 E552     		strh	r5, [r4, r3]
 695:.\Generated_Source\PSoC4/ADC.c **** }
 642              		.loc 1 695 0
 643              		@ sp needed
 644 0016 38BD     		pop	{r3, r4, r5, pc}
 645              	.L60:
 646              		.align	2
 647              	.L59:
 648 0018 00000000 		.word	ADC_offset
 649              		.cfi_endproc
 650              	.LFE13:
 651              		.size	ADC_SetOffset, .-ADC_SetOffset
 652              		.section	.text.ADC_SetGain,"ax",%progbits
 653              		.align	1
 654              		.global	ADC_SetGain
 655              		.code	16
 656              		.thumb_func
 657              		.type	ADC_SetGain, %function
 658              	ADC_SetGain:
 659              	.LFB14:
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** 
 698:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c **** *
 702:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC.c **** *
 711:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:.\Generated_Source\PSoC4/ADC.c **** *
 715:.\Generated_Source\PSoC4/ADC.c **** * Return:
 716:.\Generated_Source\PSoC4/ADC.c **** *  None.
 717:.\Generated_Source\PSoC4/ADC.c **** *
 718:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 26


 719:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC.c **** *
 722:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC.c **** {
 660              		.loc 1 724 0
 661              		.cfi_startproc
 662              	.LVL39:
 663 0000 38B5     		push	{r3, r4, r5, lr}
 664              		.cfi_def_cfa_offset 16
 665              		.cfi_offset 3, -16
 666              		.cfi_offset 4, -12
 667              		.cfi_offset 5, -8
 668              		.cfi_offset 14, -4
 669              		.loc 1 724 0
 670 0002 041C     		mov	r4, r0
 671 0004 0D1C     		mov	r5, r1
 725:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 672              		.loc 1 726 0
 673 0006 0028     		cmp	r0, #0
 674 0008 02D0     		beq	.L62
 675              		.loc 1 726 0 is_stmt 0 discriminator 1
 676 000a 0020     		mov	r0, #0
 677              	.LVL40:
 678 000c FFF7FEFF 		bl	CyHalt
 679              	.LVL41:
 680              	.L62:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 681              		.loc 1 728 0 is_stmt 1
 682 0010 014B     		ldr	r3, .L66
 683 0012 A400     		lsl	r4, r4, #2
 684              	.LVL42:
 685 0014 E550     		str	r5, [r4, r3]
 729:.\Generated_Source\PSoC4/ADC.c **** }
 686              		.loc 1 729 0
 687              		@ sp needed
 688              	.LVL43:
 689 0016 38BD     		pop	{r3, r4, r5, pc}
 690              	.L67:
 691              		.align	2
 692              	.L66:
 693 0018 00000000 		.word	ADC_countsPer10Volt
 694              		.cfi_endproc
 695              	.LFE14:
 696              		.size	ADC_SetGain, .-ADC_SetGain
 697              		.global	__aeabi_idiv
 698              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 699              		.align	1
 700              		.global	ADC_CountsTo_mVolts
 701              		.code	16
 702              		.thumb_func
 703              		.type	ADC_CountsTo_mVolts, %function
 704              	ADC_CountsTo_mVolts:
 705              	.LFB15:
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 27


 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c **** 
 732:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:.\Generated_Source\PSoC4/ADC.c **** 
 734:.\Generated_Source\PSoC4/ADC.c **** 
 735:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC.c ****     *
 739:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC.c ****     *
 743:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC.c ****     *
 747:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     *
 750:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC.c ****     {
 706              		.loc 1 757 0
 707              		.cfi_startproc
 708              	.LVL44:
 709 0000 38B5     		push	{r3, r4, r5, lr}
 710              		.cfi_def_cfa_offset 16
 711              		.cfi_offset 3, -16
 712              		.cfi_offset 4, -12
 713              		.cfi_offset 5, -8
 714              		.cfi_offset 14, -4
 715              		.loc 1 757 0
 716 0002 041C     		mov	r4, r0
 717 0004 0D1C     		mov	r5, r1
 758:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:.\Generated_Source\PSoC4/ADC.c **** 
 760:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 718              		.loc 1 761 0
 719 0006 0028     		cmp	r0, #0
 720 0008 02D0     		beq	.L69
 721              		.loc 1 761 0 is_stmt 0 discriminator 1
 722 000a 0020     		mov	r0, #0
 723              	.LVL45:
 724 000c FFF7FEFF 		bl	CyHalt
 725              	.LVL46:
 726              	.L69:
 762:.\Generated_Source\PSoC4/ADC.c **** 
 763:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 28


 766:.\Generated_Source\PSoC4/ADC.c ****             {
 767:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC.c ****             }
 769:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:.\Generated_Source\PSoC4/ADC.c **** 
 771:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 727              		.loc 1 772 0 is_stmt 1
 728 0010 0C4B     		ldr	r3, .L75
 729 0012 6200     		lsl	r2, r4, #1
 730 0014 D15A     		ldrh	r1, [r2, r3]
 731 0016 A400     		lsl	r4, r4, #2
 732              	.LVL47:
 733 0018 691A     		sub	r1, r5, r1
 734 001a 0B4D     		ldr	r5, .L75+4
 773:.\Generated_Source\PSoC4/ADC.c **** 
 774:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 735              		.loc 1 774 0
 736 001c 0B48     		ldr	r0, .L75+8
 775:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 737              		.loc 1 775 0
 738 001e 2A59     		ldr	r2, [r5, r4]
 772:.\Generated_Source\PSoC4/ADC.c **** 
 739              		.loc 1 772 0
 740 0020 09B2     		sxth	r1, r1
 741              	.LVL48:
 774:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 742              		.loc 1 774 0
 743 0022 4843     		mul	r0, r1
 744              		.loc 1 775 0
 745 0024 D30F     		lsr	r3, r2, #31
 746 0026 0029     		cmp	r1, #0
 747 0028 02DD     		ble	.L70
 748              		.loc 1 775 0 is_stmt 0 discriminator 1
 749 002a 9B18     		add	r3, r3, r2
 750 002c 5B10     		asr	r3, r3, #1
 751 002e 02E0     		b	.L71
 752              	.L70:
 753              		.loc 1 775 0 discriminator 2
 754 0030 9A18     		add	r2, r3, r2
 755 0032 5210     		asr	r2, r2, #1
 756 0034 5342     		neg	r3, r2
 757              	.L71:
 776:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 758              		.loc 1 776 0 is_stmt 1
 759 0036 2959     		ldr	r1, [r5, r4]
 760              	.LVL49:
 774:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 761              		.loc 1 774 0
 762 0038 C018     		add	r0, r0, r3
 763              	.LVL50:
 764              		.loc 1 776 0
 765 003a FFF7FEFF 		bl	__aeabi_idiv
 766              	.LVL51:
 777:.\Generated_Source\PSoC4/ADC.c **** 
 778:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 779:.\Generated_Source\PSoC4/ADC.c ****     }
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 29


 767              		.loc 1 779 0
 768              		@ sp needed
 778:.\Generated_Source\PSoC4/ADC.c ****     }
 769              		.loc 1 778 0
 770 003e 00B2     		sxth	r0, r0
 771              		.loc 1 779 0
 772 0040 38BD     		pop	{r3, r4, r5, pc}
 773              	.L76:
 774 0042 C046     		.align	2
 775              	.L75:
 776 0044 00000000 		.word	ADC_offset
 777 0048 00000000 		.word	ADC_countsPer10Volt
 778 004c 10270000 		.word	10000
 779              		.cfi_endproc
 780              	.LFE15:
 781              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 782              		.global	__aeabi_lmul
 783              		.global	__aeabi_ldivmod
 784              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 785              		.align	1
 786              		.global	ADC_CountsTo_uVolts
 787              		.code	16
 788              		.thumb_func
 789              		.type	ADC_CountsTo_uVolts, %function
 790              	ADC_CountsTo_uVolts:
 791              	.LFB16:
 780:.\Generated_Source\PSoC4/ADC.c **** 
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC.c ****     *
 786:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC.c ****     *
 790:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC.c ****     *
 794:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC.c ****     *
 797:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC.c ****     *
 802:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC.c ****     *
 809:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 30


 811:.\Generated_Source\PSoC4/ADC.c ****     {
 792              		.loc 1 811 0
 793              		.cfi_startproc
 794              	.LVL52:
 795 0000 38B5     		push	{r3, r4, r5, lr}
 796              		.cfi_def_cfa_offset 16
 797              		.cfi_offset 3, -16
 798              		.cfi_offset 4, -12
 799              		.cfi_offset 5, -8
 800              		.cfi_offset 14, -4
 801              		.loc 1 811 0
 802 0002 051C     		mov	r5, r0
 803 0004 0C1C     		mov	r4, r1
 812:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC.c **** 
 814:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 804              		.loc 1 815 0
 805 0006 0028     		cmp	r0, #0
 806 0008 02D0     		beq	.L78
 807              		.loc 1 815 0 is_stmt 0 discriminator 1
 808 000a 0020     		mov	r0, #0
 809              	.LVL53:
 810 000c FFF7FEFF 		bl	CyHalt
 811              	.LVL54:
 812              	.L78:
 816:.\Generated_Source\PSoC4/ADC.c **** 
 817:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:.\Generated_Source\PSoC4/ADC.c ****             {
 821:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC.c ****             }
 823:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC.c **** 
 825:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 813              		.loc 1 826 0 is_stmt 1
 814 0010 084B     		ldr	r3, .L82
 815 0012 6A00     		lsl	r2, r5, #1
 816 0014 D05A     		ldrh	r0, [r2, r3]
 827:.\Generated_Source\PSoC4/ADC.c **** 
 828:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 817              		.loc 1 828 0
 818 0016 084B     		ldr	r3, .L82+4
 826:.\Generated_Source\PSoC4/ADC.c **** 
 819              		.loc 1 826 0
 820 0018 241A     		sub	r4, r4, r0
 821              	.LVL55:
 822              		.loc 1 828 0
 823 001a AD00     		lsl	r5, r5, #2
 824              	.LVL56:
 825 001c ED58     		ldr	r5, [r5, r3]
 826              	.LVL57:
 827 001e 20B2     		sxth	r0, r4
 828 0020 064A     		ldr	r2, .L82+8
 829 0022 0023     		mov	r3, #0
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 31


 830 0024 C117     		asr	r1, r0, #31
 831 0026 FFF7FEFF 		bl	__aeabi_lmul
 832              	.LVL58:
 833 002a EB17     		asr	r3, r5, #31
 834 002c 2A1C     		mov	r2, r5
 835 002e FFF7FEFF 		bl	__aeabi_ldivmod
 836              	.LVL59:
 829:.\Generated_Source\PSoC4/ADC.c **** 
 830:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 831:.\Generated_Source\PSoC4/ADC.c ****     }
 837              		.loc 1 831 0
 838              		@ sp needed
 839              	.LVL60:
 840 0032 38BD     		pop	{r3, r4, r5, pc}
 841              	.L83:
 842              		.align	2
 843              	.L82:
 844 0034 00000000 		.word	ADC_offset
 845 0038 00000000 		.word	ADC_countsPer10Volt
 846 003c 80969800 		.word	10000000
 847              		.cfi_endproc
 848              	.LFE16:
 849              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 850              		.global	__aeabi_i2f
 851              		.global	__aeabi_fmul
 852              		.global	__aeabi_fdiv
 853              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 854              		.align	1
 855              		.global	ADC_CountsTo_Volts
 856              		.code	16
 857              		.thumb_func
 858              		.type	ADC_CountsTo_Volts, %function
 859              	ADC_CountsTo_Volts:
 860              	.LFB17:
 832:.\Generated_Source\PSoC4/ADC.c **** 
 833:.\Generated_Source\PSoC4/ADC.c **** 
 834:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC.c ****     *
 838:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC.c ****     *
 842:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC.c ****     *
 846:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:.\Generated_Source\PSoC4/ADC.c ****     *
 849:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:.\Generated_Source\PSoC4/ADC.c ****     *
 854:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 32


 855:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC.c ****     {
 861              		.loc 1 856 0
 862              		.cfi_startproc
 863              	.LVL61:
 864 0000 38B5     		push	{r3, r4, r5, lr}
 865              		.cfi_def_cfa_offset 16
 866              		.cfi_offset 3, -16
 867              		.cfi_offset 4, -12
 868              		.cfi_offset 5, -8
 869              		.cfi_offset 14, -4
 870              		.loc 1 856 0
 871 0002 051C     		mov	r5, r0
 872 0004 0C1C     		mov	r4, r1
 857:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC.c **** 
 859:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 873              		.loc 1 860 0
 874 0006 0028     		cmp	r0, #0
 875 0008 02D0     		beq	.L85
 876              		.loc 1 860 0 is_stmt 0 discriminator 1
 877 000a 0020     		mov	r0, #0
 878              	.LVL62:
 879 000c FFF7FEFF 		bl	CyHalt
 880              	.LVL63:
 881              	.L85:
 861:.\Generated_Source\PSoC4/ADC.c **** 
 862:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC.c ****             {
 866:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC.c ****             }
 868:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC.c **** 
 870:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 882              		.loc 1 871 0 is_stmt 1
 883 0010 0A4B     		ldr	r3, .L89
 884 0012 6A00     		lsl	r2, r5, #1
 885 0014 D05A     		ldrh	r0, [r2, r3]
 872:.\Generated_Source\PSoC4/ADC.c **** 
 873:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 886              		.loc 1 873 0
 887 0016 0A4B     		ldr	r3, .L89+4
 871:.\Generated_Source\PSoC4/ADC.c **** 
 888              		.loc 1 871 0
 889 0018 241A     		sub	r4, r4, r0
 890              	.LVL64:
 891              		.loc 1 873 0
 892 001a 20B2     		sxth	r0, r4
 893 001c AD00     		lsl	r5, r5, #2
 894              	.LVL65:
 895 001e ED58     		ldr	r5, [r5, r3]
 896              	.LVL66:
 897 0020 FFF7FEFF 		bl	__aeabi_i2f
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 33


 898              	.LVL67:
 899 0024 0749     		ldr	r1, .L89+8
 900 0026 FFF7FEFF 		bl	__aeabi_fmul
 901              	.LVL68:
 902 002a 041C     		add	r4, r0, #0
 903              	.LVL69:
 904 002c 281C     		mov	r0, r5
 905 002e FFF7FEFF 		bl	__aeabi_i2f
 906              	.LVL70:
 907 0032 011C     		add	r1, r0, #0
 908 0034 201C     		add	r0, r4, #0
 909 0036 FFF7FEFF 		bl	__aeabi_fdiv
 910              	.LVL71:
 874:.\Generated_Source\PSoC4/ADC.c **** 
 875:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 876:.\Generated_Source\PSoC4/ADC.c ****     }
 911              		.loc 1 876 0
 912              		@ sp needed
 913 003a 38BD     		pop	{r3, r4, r5, pc}
 914              	.L90:
 915              		.align	2
 916              	.L89:
 917 003c 00000000 		.word	ADC_offset
 918 0040 00000000 		.word	ADC_countsPer10Volt
 919 0044 00002041 		.word	1092616192
 920              		.cfi_endproc
 921              	.LFE17:
 922              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 923              		.comm	ADC_countsPer10Volt,4,4
 924              		.comm	ADC_offset,2,2
 925              		.global	ADC_initVar
 926              		.bss
 927              		.set	.LANCHOR0,. + 0
 928              		.type	ADC_initVar, %object
 929              		.size	ADC_initVar, 1
 930              	ADC_initVar:
 931 0000 00       		.space	1
 932              		.text
 933              	.Letext0:
 934              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 935              		.file 3 ".\\Generated_Source\\PSoC4\\CyLib.h"
 936              		.section	.debug_info,"",%progbits
 937              	.Ldebug_info0:
 938 0000 99050000 		.4byte	0x599
 939 0004 0400     		.2byte	0x4
 940 0006 00000000 		.4byte	.Ldebug_abbrev0
 941 000a 04       		.byte	0x4
 942 000b 01       		.uleb128 0x1
 943 000c 07000000 		.4byte	.LASF61
 944 0010 01       		.byte	0x1
 945 0011 03030000 		.4byte	.LASF62
 946 0015 EA010000 		.4byte	.LASF63
 947 0019 00000000 		.4byte	.Ldebug_ranges0+0
 948 001d 00000000 		.4byte	0
 949 0021 00000000 		.4byte	.Ldebug_line0
 950 0025 02       		.uleb128 0x2
 951 0026 08       		.byte	0x8
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 34


 952 0027 07       		.byte	0x7
 953 0028 C0000000 		.4byte	.LASF0
 954 002c 02       		.uleb128 0x2
 955 002d 04       		.byte	0x4
 956 002e 04       		.byte	0x4
 957 002f C8020000 		.4byte	.LASF1
 958 0033 02       		.uleb128 0x2
 959 0034 08       		.byte	0x8
 960 0035 05       		.byte	0x5
 961 0036 E8000000 		.4byte	.LASF2
 962 003a 03       		.uleb128 0x3
 963 003b 04       		.byte	0x4
 964 003c 05       		.byte	0x5
 965 003d 696E7400 		.ascii	"int\000"
 966 0041 02       		.uleb128 0x2
 967 0042 02       		.byte	0x2
 968 0043 05       		.byte	0x5
 969 0044 3B030000 		.4byte	.LASF3
 970 0048 02       		.uleb128 0x2
 971 0049 01       		.byte	0x1
 972 004a 06       		.byte	0x6
 973 004b F6000000 		.4byte	.LASF4
 974 004f 02       		.uleb128 0x2
 975 0050 01       		.byte	0x1
 976 0051 08       		.byte	0x8
 977 0052 22030000 		.4byte	.LASF5
 978 0056 02       		.uleb128 0x2
 979 0057 02       		.byte	0x2
 980 0058 07       		.byte	0x7
 981 0059 D7010000 		.4byte	.LASF6
 982 005d 02       		.uleb128 0x2
 983 005e 04       		.byte	0x4
 984 005f 05       		.byte	0x5
 985 0060 19010000 		.4byte	.LASF7
 986 0064 02       		.uleb128 0x2
 987 0065 04       		.byte	0x4
 988 0066 07       		.byte	0x7
 989 0067 A6010000 		.4byte	.LASF8
 990 006b 02       		.uleb128 0x2
 991 006c 04       		.byte	0x4
 992 006d 07       		.byte	0x7
 993 006e 92010000 		.4byte	.LASF9
 994 0072 04       		.uleb128 0x4
 995 0073 4A010000 		.4byte	.LASF10
 996 0077 02       		.byte	0x2
 997 0078 C2       		.byte	0xc2
 998 0079 4F000000 		.4byte	0x4f
 999 007d 04       		.uleb128 0x4
 1000 007e 00000000 		.4byte	.LASF11
 1001 0082 02       		.byte	0x2
 1002 0083 C3       		.byte	0xc3
 1003 0084 56000000 		.4byte	0x56
 1004 0088 04       		.uleb128 0x4
 1005 0089 61010000 		.4byte	.LASF12
 1006 008d 02       		.byte	0x2
 1007 008e C4       		.byte	0xc4
 1008 008f 64000000 		.4byte	0x64
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 35


 1009 0093 04       		.uleb128 0x4
 1010 0094 9A030000 		.4byte	.LASF13
 1011 0098 02       		.byte	0x2
 1012 0099 C6       		.byte	0xc6
 1013 009a 41000000 		.4byte	0x41
 1014 009e 04       		.uleb128 0x4
 1015 009f 09010000 		.4byte	.LASF14
 1016 00a3 02       		.byte	0x2
 1017 00a4 C7       		.byte	0xc7
 1018 00a5 5D000000 		.4byte	0x5d
 1019 00a9 04       		.uleb128 0x4
 1020 00aa 56020000 		.4byte	.LASF15
 1021 00ae 02       		.byte	0x2
 1022 00af C8       		.byte	0xc8
 1023 00b0 2C000000 		.4byte	0x2c
 1024 00b4 02       		.uleb128 0x2
 1025 00b5 08       		.byte	0x8
 1026 00b6 04       		.byte	0x4
 1027 00b7 5A010000 		.4byte	.LASF16
 1028 00bb 04       		.uleb128 0x4
 1029 00bc 95020000 		.4byte	.LASF17
 1030 00c0 02       		.byte	0x2
 1031 00c1 CD       		.byte	0xcd
 1032 00c2 33000000 		.4byte	0x33
 1033 00c6 02       		.uleb128 0x2
 1034 00c7 01       		.byte	0x1
 1035 00c8 08       		.byte	0x8
 1036 00c9 59030000 		.4byte	.LASF18
 1037 00cd 05       		.uleb128 0x5
 1038 00ce 50020000 		.4byte	.LASF19
 1039 00d2 02       		.byte	0x2
 1040 00d3 6E01     		.2byte	0x16e
 1041 00d5 D9000000 		.4byte	0xd9
 1042 00d9 06       		.uleb128 0x6
 1043 00da 88000000 		.4byte	0x88
 1044 00de 05       		.uleb128 0x5
 1045 00df 5E030000 		.4byte	.LASF20
 1046 00e3 02       		.byte	0x2
 1047 00e4 7E01     		.2byte	0x17e
 1048 00e6 EA000000 		.4byte	0xea
 1049 00ea 07       		.uleb128 0x7
 1050 00eb 04       		.byte	0x4
 1051 00ec F0000000 		.4byte	0xf0
 1052 00f0 08       		.uleb128 0x8
 1053 00f1 02       		.uleb128 0x2
 1054 00f2 04       		.byte	0x4
 1055 00f3 07       		.byte	0x7
 1056 00f4 5E020000 		.4byte	.LASF21
 1057 00f8 09       		.uleb128 0x9
 1058 00f9 8F030000 		.4byte	.LASF64
 1059 00fd 01       		.byte	0x1
 1060 00fe 4A01     		.2byte	0x14a
 1061 0100 01       		.byte	0x1
 1062 0101 0A       		.uleb128 0xa
 1063 0102 B7000000 		.4byte	.LASF25
 1064 0106 01       		.byte	0x1
 1065 0107 5E       		.byte	0x5e
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 36


 1066 0108 00000000 		.4byte	.LFB1
 1067 010c EC000000 		.4byte	.LFE1-.LFB1
 1068 0110 01       		.uleb128 0x1
 1069 0111 9C       		.byte	0x9c
 1070 0112 69010000 		.4byte	0x169
 1071 0116 0B       		.uleb128 0xb
 1072 0117 4E030000 		.4byte	.LASF22
 1073 011b 01       		.byte	0x1
 1074 011c 60       		.byte	0x60
 1075 011d 88000000 		.4byte	0x88
 1076 0121 00000000 		.4byte	.LLST0
 1077 0125 0B       		.uleb128 0xb
 1078 0126 CD010000 		.4byte	.LASF23
 1079 012a 01       		.byte	0x1
 1080 012b 61       		.byte	0x61
 1081 012c 88000000 		.4byte	0x88
 1082 0130 20000000 		.4byte	.LLST1
 1083 0134 0C       		.uleb128 0xc
 1084 0135 9D000000 		.4byte	.LASF24
 1085 0139 01       		.byte	0x1
 1086 013a 62       		.byte	0x62
 1087 013b 9E000000 		.4byte	0x9e
 1088 013f 0010     		.2byte	0x1000
 1089 0141 0D       		.uleb128 0xd
 1090 0142 0A000000 		.4byte	.LVL0
 1091 0146 4E050000 		.4byte	0x54e
 1092 014a 59010000 		.4byte	0x159
 1093 014e 0E       		.uleb128 0xe
 1094 014f 01       		.uleb128 0x1
 1095 0150 51       		.byte	0x51
 1096 0151 01       		.uleb128 0x1
 1097 0152 33       		.byte	0x33
 1098 0153 0E       		.uleb128 0xe
 1099 0154 01       		.uleb128 0x1
 1100 0155 50       		.byte	0x50
 1101 0156 01       		.uleb128 0x1
 1102 0157 3E       		.byte	0x3e
 1103 0158 00       		.byte	0
 1104 0159 0F       		.uleb128 0xf
 1105 015a 12000000 		.4byte	.LVL1
 1106 015e 64050000 		.4byte	0x564
 1107 0162 0E       		.uleb128 0xe
 1108 0163 01       		.uleb128 0x1
 1109 0164 50       		.byte	0x50
 1110 0165 01       		.uleb128 0x1
 1111 0166 3E       		.byte	0x3e
 1112 0167 00       		.byte	0
 1113 0168 00       		.byte	0
 1114 0169 10       		.uleb128 0x10
 1115 016a F8000000 		.4byte	0xf8
 1116 016e 00000000 		.4byte	.LFB2
 1117 0172 20000000 		.4byte	.LFE2-.LFB2
 1118 0176 01       		.uleb128 0x1
 1119 0177 9C       		.byte	0x9c
 1120 0178 8C010000 		.4byte	0x18c
 1121 017c 0F       		.uleb128 0xf
 1122 017d 1A000000 		.4byte	.LVL8
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 37


 1123 0181 7E050000 		.4byte	0x57e
 1124 0185 0E       		.uleb128 0xe
 1125 0186 01       		.uleb128 0x1
 1126 0187 50       		.byte	0x50
 1127 0188 01       		.uleb128 0x1
 1128 0189 3A       		.byte	0x3a
 1129 018a 00       		.byte	0
 1130 018b 00       		.byte	0
 1131 018c 0A       		.uleb128 0xa
 1132 018d 0F010000 		.4byte	.LASF26
 1133 0191 01       		.byte	0x1
 1134 0192 3F       		.byte	0x3f
 1135 0193 00000000 		.4byte	.LFB0
 1136 0197 1C000000 		.4byte	.LFE0-.LFB0
 1137 019b 01       		.uleb128 0x1
 1138 019c 9C       		.byte	0x9c
 1139 019d B4010000 		.4byte	0x1b4
 1140 01a1 11       		.uleb128 0x11
 1141 01a2 0E000000 		.4byte	.LVL9
 1142 01a6 01010000 		.4byte	0x101
 1143 01aa 11       		.uleb128 0x11
 1144 01ab 16000000 		.4byte	.LVL10
 1145 01af F8000000 		.4byte	0xf8
 1146 01b3 00       		.byte	0
 1147 01b4 12       		.uleb128 0x12
 1148 01b5 45030000 		.4byte	.LASF27
 1149 01b9 01       		.byte	0x1
 1150 01ba 6D01     		.2byte	0x16d
 1151 01bc 00000000 		.4byte	.LFB3
 1152 01c0 10000000 		.4byte	.LFE3-.LFB3
 1153 01c4 01       		.uleb128 0x1
 1154 01c5 9C       		.byte	0x9c
 1155 01c6 12       		.uleb128 0x12
 1156 01c7 D7000000 		.4byte	.LASF28
 1157 01cb 01       		.byte	0x1
 1158 01cc 8701     		.2byte	0x187
 1159 01ce 00000000 		.4byte	.LFB4
 1160 01d2 14000000 		.4byte	.LFE4-.LFB4
 1161 01d6 01       		.uleb128 0x1
 1162 01d7 9C       		.byte	0x9c
 1163 01d8 12       		.uleb128 0x12
 1164 01d9 39020000 		.4byte	.LASF29
 1165 01dd 01       		.byte	0x1
 1166 01de A001     		.2byte	0x1a0
 1167 01e0 00000000 		.4byte	.LFB5
 1168 01e4 14000000 		.4byte	.LFE5-.LFB5
 1169 01e8 01       		.uleb128 0x1
 1170 01e9 9C       		.byte	0x9c
 1171 01ea 13       		.uleb128 0x13
 1172 01eb 81020000 		.4byte	.LASF31
 1173 01ef 01       		.byte	0x1
 1174 01f0 C201     		.2byte	0x1c2
 1175 01f2 88000000 		.4byte	0x88
 1176 01f6 00000000 		.4byte	.LFB6
 1177 01fa 28000000 		.4byte	.LFE6-.LFB6
 1178 01fe 01       		.uleb128 0x1
 1179 01ff 9C       		.byte	0x9c
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 38


 1180 0200 25020000 		.4byte	0x225
 1181 0204 14       		.uleb128 0x14
 1182 0205 79010000 		.4byte	.LASF33
 1183 0209 01       		.byte	0x1
 1184 020a C201     		.2byte	0x1c2
 1185 020c 88000000 		.4byte	0x88
 1186 0210 3F000000 		.4byte	.LLST2
 1187 0214 15       		.uleb128 0x15
 1188 0215 02010000 		.4byte	.LASF30
 1189 0219 01       		.byte	0x1
 1190 021a C401     		.2byte	0x1c4
 1191 021c 88000000 		.4byte	0x88
 1192 0220 6B000000 		.4byte	.LLST3
 1193 0224 00       		.byte	0
 1194 0225 13       		.uleb128 0x13
 1195 0226 B5030000 		.4byte	.LASF32
 1196 022a 01       		.byte	0x1
 1197 022b F801     		.2byte	0x1f8
 1198 022d 93000000 		.4byte	0x93
 1199 0231 00000000 		.4byte	.LFB7
 1200 0235 20000000 		.4byte	.LFE7-.LFB7
 1201 0239 01       		.uleb128 0x1
 1202 023a 9C       		.byte	0x9c
 1203 023b 6F020000 		.4byte	0x26f
 1204 023f 14       		.uleb128 0x14
 1205 0240 54030000 		.4byte	.LASF34
 1206 0244 01       		.byte	0x1
 1207 0245 F801     		.2byte	0x1f8
 1208 0247 88000000 		.4byte	0x88
 1209 024b 96000000 		.4byte	.LLST4
 1210 024f 15       		.uleb128 0x15
 1211 0250 AE030000 		.4byte	.LASF35
 1212 0254 01       		.byte	0x1
 1213 0255 FA01     		.2byte	0x1fa
 1214 0257 88000000 		.4byte	0x88
 1215 025b D0000000 		.4byte	.LLST5
 1216 025f 0F       		.uleb128 0xf
 1217 0260 0C000000 		.4byte	.LVL20
 1218 0264 8F050000 		.4byte	0x58f
 1219 0268 0E       		.uleb128 0xe
 1220 0269 01       		.uleb128 0x1
 1221 026a 50       		.byte	0x50
 1222 026b 01       		.uleb128 0x1
 1223 026c 30       		.byte	0x30
 1224 026d 00       		.byte	0
 1225 026e 00       		.byte	0
 1226 026f 16       		.uleb128 0x16
 1227 0270 AC020000 		.4byte	.LASF36
 1228 0274 01       		.byte	0x1
 1229 0275 2502     		.2byte	0x225
 1230 0277 00000000 		.4byte	.LFB8
 1231 027b 10000000 		.4byte	.LFE8-.LFB8
 1232 027f 01       		.uleb128 0x1
 1233 0280 9C       		.byte	0x9c
 1234 0281 96020000 		.4byte	0x296
 1235 0285 14       		.uleb128 0x14
 1236 0286 68010000 		.4byte	.LASF37
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 39


 1237 028a 01       		.byte	0x1
 1238 028b 2502     		.2byte	0x225
 1239 028d 88000000 		.4byte	0x88
 1240 0291 E3000000 		.4byte	.LLST6
 1241 0295 00       		.byte	0
 1242 0296 16       		.uleb128 0x16
 1243 0297 EC020000 		.4byte	.LASF38
 1244 029b 01       		.byte	0x1
 1245 029c 5102     		.2byte	0x251
 1246 029e 00000000 		.4byte	.LFB9
 1247 02a2 18000000 		.4byte	.LFE9-.LFB9
 1248 02a6 01       		.uleb128 0x1
 1249 02a7 9C       		.byte	0x9c
 1250 02a8 BD020000 		.4byte	0x2bd
 1251 02ac 14       		.uleb128 0x14
 1252 02ad 67020000 		.4byte	.LASF39
 1253 02b1 01       		.byte	0x1
 1254 02b2 5102     		.2byte	0x251
 1255 02b4 88000000 		.4byte	0x88
 1256 02b8 04010000 		.4byte	.LLST7
 1257 02bc 00       		.byte	0
 1258 02bd 16       		.uleb128 0x16
 1259 02be 70020000 		.4byte	.LASF40
 1260 02c2 01       		.byte	0x1
 1261 02c3 6602     		.2byte	0x266
 1262 02c5 00000000 		.4byte	.LFB10
 1263 02c9 18000000 		.4byte	.LFE10-.LFB10
 1264 02cd 01       		.uleb128 0x1
 1265 02ce 9C       		.byte	0x9c
 1266 02cf E4020000 		.4byte	0x2e4
 1267 02d3 14       		.uleb128 0x14
 1268 02d4 CE020000 		.4byte	.LASF41
 1269 02d8 01       		.byte	0x1
 1270 02d9 6602     		.2byte	0x266
 1271 02db 88000000 		.4byte	0x88
 1272 02df 25010000 		.4byte	.LLST8
 1273 02e3 00       		.byte	0
 1274 02e4 16       		.uleb128 0x16
 1275 02e5 81010000 		.4byte	.LASF42
 1276 02e9 01       		.byte	0x1
 1277 02ea 7E02     		.2byte	0x27e
 1278 02ec 00000000 		.4byte	.LFB11
 1279 02f0 10000000 		.4byte	.LFE11-.LFB11
 1280 02f4 01       		.uleb128 0x1
 1281 02f5 9C       		.byte	0x9c
 1282 02f6 0B030000 		.4byte	0x30b
 1283 02fa 14       		.uleb128 0x14
 1284 02fb 68010000 		.4byte	.LASF37
 1285 02ff 01       		.byte	0x1
 1286 0300 7E02     		.2byte	0x27e
 1287 0302 88000000 		.4byte	0x88
 1288 0306 46010000 		.4byte	.LLST9
 1289 030a 00       		.byte	0
 1290 030b 16       		.uleb128 0x16
 1291 030c B8010000 		.4byte	.LASF43
 1292 0310 01       		.byte	0x1
 1293 0311 9502     		.2byte	0x295
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 40


 1294 0313 00000000 		.4byte	.LFB12
 1295 0317 10000000 		.4byte	.LFE12-.LFB12
 1296 031b 01       		.uleb128 0x1
 1297 031c 9C       		.byte	0x9c
 1298 031d 32030000 		.4byte	0x332
 1299 0321 14       		.uleb128 0x14
 1300 0322 68010000 		.4byte	.LASF37
 1301 0326 01       		.byte	0x1
 1302 0327 9502     		.2byte	0x295
 1303 0329 88000000 		.4byte	0x88
 1304 032d 67010000 		.4byte	.LLST10
 1305 0331 00       		.byte	0
 1306 0332 16       		.uleb128 0x16
 1307 0333 A0030000 		.4byte	.LASF44
 1308 0337 01       		.byte	0x1
 1309 0338 B102     		.2byte	0x2b1
 1310 033a 00000000 		.4byte	.LFB13
 1311 033e 1C000000 		.4byte	.LFE13-.LFB13
 1312 0342 01       		.uleb128 0x1
 1313 0343 9C       		.byte	0x9c
 1314 0344 78030000 		.4byte	0x378
 1315 0348 14       		.uleb128 0x14
 1316 0349 54030000 		.4byte	.LASF34
 1317 034d 01       		.byte	0x1
 1318 034e B102     		.2byte	0x2b1
 1319 0350 88000000 		.4byte	0x88
 1320 0354 88010000 		.4byte	.LLST11
 1321 0358 14       		.uleb128 0x14
 1322 0359 7E030000 		.4byte	.LASF45
 1323 035d 01       		.byte	0x1
 1324 035e B102     		.2byte	0x2b1
 1325 0360 93000000 		.4byte	0x93
 1326 0364 B4010000 		.4byte	.LLST12
 1327 0368 0F       		.uleb128 0xf
 1328 0369 10000000 		.4byte	.LVL37
 1329 036d 8F050000 		.4byte	0x58f
 1330 0371 0E       		.uleb128 0xe
 1331 0372 01       		.uleb128 0x1
 1332 0373 50       		.byte	0x50
 1333 0374 01       		.uleb128 0x1
 1334 0375 30       		.byte	0x30
 1335 0376 00       		.byte	0
 1336 0377 00       		.byte	0
 1337 0378 16       		.uleb128 0x16
 1338 0379 BC020000 		.4byte	.LASF46
 1339 037d 01       		.byte	0x1
 1340 037e D302     		.2byte	0x2d3
 1341 0380 00000000 		.4byte	.LFB14
 1342 0384 1C000000 		.4byte	.LFE14-.LFB14
 1343 0388 01       		.uleb128 0x1
 1344 0389 9C       		.byte	0x9c
 1345 038a BE030000 		.4byte	0x3be
 1346 038e 14       		.uleb128 0x14
 1347 038f 54030000 		.4byte	.LASF34
 1348 0393 01       		.byte	0x1
 1349 0394 D302     		.2byte	0x2d3
 1350 0396 88000000 		.4byte	0x88
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 41


 1351 039a D5010000 		.4byte	.LLST13
 1352 039e 14       		.uleb128 0x14
 1353 039f 95000000 		.4byte	.LASF47
 1354 03a3 01       		.byte	0x1
 1355 03a4 D302     		.2byte	0x2d3
 1356 03a6 9E000000 		.4byte	0x9e
 1357 03aa 01020000 		.4byte	.LLST14
 1358 03ae 0F       		.uleb128 0xf
 1359 03af 10000000 		.4byte	.LVL41
 1360 03b3 8F050000 		.4byte	0x58f
 1361 03b7 0E       		.uleb128 0xe
 1362 03b8 01       		.uleb128 0x1
 1363 03b9 50       		.byte	0x50
 1364 03ba 01       		.uleb128 0x1
 1365 03bb 30       		.byte	0x30
 1366 03bc 00       		.byte	0
 1367 03bd 00       		.byte	0
 1368 03be 17       		.uleb128 0x17
 1369 03bf D8020000 		.4byte	.LASF48
 1370 03c3 01       		.byte	0x1
 1371 03c4 F402     		.2byte	0x2f4
 1372 03c6 93000000 		.4byte	0x93
 1373 03ca 00000000 		.4byte	.LFB15
 1374 03ce 50000000 		.4byte	.LFE15-.LFB15
 1375 03d2 01       		.uleb128 0x1
 1376 03d3 9C       		.byte	0x9c
 1377 03d4 18040000 		.4byte	0x418
 1378 03d8 14       		.uleb128 0x14
 1379 03d9 54030000 		.4byte	.LASF34
 1380 03dd 01       		.byte	0x1
 1381 03de F402     		.2byte	0x2f4
 1382 03e0 88000000 		.4byte	0x88
 1383 03e4 31020000 		.4byte	.LLST15
 1384 03e8 14       		.uleb128 0x14
 1385 03e9 85030000 		.4byte	.LASF49
 1386 03ed 01       		.byte	0x1
 1387 03ee F402     		.2byte	0x2f4
 1388 03f0 93000000 		.4byte	0x93
 1389 03f4 5D020000 		.4byte	.LLST16
 1390 03f8 15       		.uleb128 0x15
 1391 03f9 49020000 		.4byte	.LASF50
 1392 03fd 01       		.byte	0x1
 1393 03fe F602     		.2byte	0x2f6
 1394 0400 93000000 		.4byte	0x93
 1395 0404 89020000 		.4byte	.LLST17
 1396 0408 0F       		.uleb128 0xf
 1397 0409 10000000 		.4byte	.LVL46
 1398 040d 8F050000 		.4byte	0x58f
 1399 0411 0E       		.uleb128 0xe
 1400 0412 01       		.uleb128 0x1
 1401 0413 50       		.byte	0x50
 1402 0414 01       		.uleb128 0x1
 1403 0415 30       		.byte	0x30
 1404 0416 00       		.byte	0
 1405 0417 00       		.byte	0
 1406 0418 17       		.uleb128 0x17
 1407 0419 22010000 		.4byte	.LASF51
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 42


 1408 041d 01       		.byte	0x1
 1409 041e 2A03     		.2byte	0x32a
 1410 0420 9E000000 		.4byte	0x9e
 1411 0424 00000000 		.4byte	.LFB16
 1412 0428 40000000 		.4byte	.LFE16-.LFB16
 1413 042c 01       		.uleb128 0x1
 1414 042d 9C       		.byte	0x9c
 1415 042e 72040000 		.4byte	0x472
 1416 0432 14       		.uleb128 0x14
 1417 0433 54030000 		.4byte	.LASF34
 1418 0437 01       		.byte	0x1
 1419 0438 2A03     		.2byte	0x32a
 1420 043a 88000000 		.4byte	0x88
 1421 043e A4020000 		.4byte	.LLST18
 1422 0442 14       		.uleb128 0x14
 1423 0443 85030000 		.4byte	.LASF49
 1424 0447 01       		.byte	0x1
 1425 0448 2A03     		.2byte	0x32a
 1426 044a 93000000 		.4byte	0x93
 1427 044e D0020000 		.4byte	.LLST19
 1428 0452 15       		.uleb128 0x15
 1429 0453 9F010000 		.4byte	.LASF52
 1430 0457 01       		.byte	0x1
 1431 0458 2C03     		.2byte	0x32c
 1432 045a BB000000 		.4byte	0xbb
 1433 045e FC020000 		.4byte	.LLST20
 1434 0462 0F       		.uleb128 0xf
 1435 0463 10000000 		.4byte	.LVL54
 1436 0467 8F050000 		.4byte	0x58f
 1437 046b 0E       		.uleb128 0xe
 1438 046c 01       		.uleb128 0x1
 1439 046d 50       		.byte	0x50
 1440 046e 01       		.uleb128 0x1
 1441 046f 30       		.byte	0x30
 1442 0470 00       		.byte	0
 1443 0471 00       		.byte	0
 1444 0472 17       		.uleb128 0x17
 1445 0473 A4000000 		.4byte	.LASF53
 1446 0477 01       		.byte	0x1
 1447 0478 5703     		.2byte	0x357
 1448 047a A9000000 		.4byte	0xa9
 1449 047e 00000000 		.4byte	.LFB17
 1450 0482 48000000 		.4byte	.LFE17-.LFB17
 1451 0486 01       		.uleb128 0x1
 1452 0487 9C       		.byte	0x9c
 1453 0488 CC040000 		.4byte	0x4cc
 1454 048c 14       		.uleb128 0x14
 1455 048d 54030000 		.4byte	.LASF34
 1456 0491 01       		.byte	0x1
 1457 0492 5703     		.2byte	0x357
 1458 0494 88000000 		.4byte	0x88
 1459 0498 28030000 		.4byte	.LLST21
 1460 049c 14       		.uleb128 0x14
 1461 049d 85030000 		.4byte	.LASF49
 1462 04a1 01       		.byte	0x1
 1463 04a2 5703     		.2byte	0x357
 1464 04a4 93000000 		.4byte	0x93
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 43


 1465 04a8 54030000 		.4byte	.LLST22
 1466 04ac 15       		.uleb128 0x15
 1467 04ad C7010000 		.4byte	.LASF54
 1468 04b1 01       		.byte	0x1
 1469 04b2 5903     		.2byte	0x359
 1470 04b4 A9000000 		.4byte	0xa9
 1471 04b8 80030000 		.4byte	.LLST23
 1472 04bc 0F       		.uleb128 0xf
 1473 04bd 10000000 		.4byte	.LVL63
 1474 04c1 8F050000 		.4byte	0x58f
 1475 04c5 0E       		.uleb128 0xe
 1476 04c6 01       		.uleb128 0x1
 1477 04c7 50       		.byte	0x50
 1478 04c8 01       		.uleb128 0x1
 1479 04c9 30       		.byte	0x30
 1480 04ca 00       		.byte	0
 1481 04cb 00       		.byte	0
 1482 04cc 18       		.uleb128 0x18
 1483 04cd 88000000 		.4byte	0x88
 1484 04d1 DC040000 		.4byte	0x4dc
 1485 04d5 19       		.uleb128 0x19
 1486 04d6 F1000000 		.4byte	0xf1
 1487 04da 00       		.byte	0
 1488 04db 00       		.byte	0
 1489 04dc 1A       		.uleb128 0x1a
 1490 04dd 6B030000 		.4byte	.LASF55
 1491 04e1 01       		.byte	0x1
 1492 04e2 21       		.byte	0x21
 1493 04e3 EC040000 		.4byte	0x4ec
 1494 04e7 04       		.byte	0x4
 1495 04e8 00       		.byte	0
 1496 04e9 00       		.byte	0
 1497 04ea 00       		.byte	0
 1498 04eb 00       		.byte	0
 1499 04ec 1B       		.uleb128 0x1b
 1500 04ed CC040000 		.4byte	0x4cc
 1501 04f1 1C       		.uleb128 0x1c
 1502 04f2 6D010000 		.4byte	.LASF56
 1503 04f6 01       		.byte	0x1
 1504 04f7 18       		.byte	0x18
 1505 04f8 72000000 		.4byte	0x72
 1506 04fc 05       		.uleb128 0x5
 1507 04fd 03       		.byte	0x3
 1508 04fe 00000000 		.4byte	ADC_initVar
 1509 0502 18       		.uleb128 0x18
 1510 0503 93000000 		.4byte	0x93
 1511 0507 12050000 		.4byte	0x512
 1512 050b 19       		.uleb128 0x19
 1513 050c F1000000 		.4byte	0xf1
 1514 0510 00       		.byte	0
 1515 0511 00       		.byte	0
 1516 0512 1C       		.uleb128 0x1c
 1517 0513 30030000 		.4byte	.LASF57
 1518 0517 01       		.byte	0x1
 1519 0518 19       		.byte	0x19
 1520 0519 23050000 		.4byte	0x523
 1521 051d 05       		.uleb128 0x5
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 44


 1522 051e 03       		.byte	0x3
 1523 051f 00000000 		.4byte	ADC_offset
 1524 0523 06       		.uleb128 0x6
 1525 0524 02050000 		.4byte	0x502
 1526 0528 18       		.uleb128 0x18
 1527 0529 9E000000 		.4byte	0x9e
 1528 052d 38050000 		.4byte	0x538
 1529 0531 19       		.uleb128 0x19
 1530 0532 F1000000 		.4byte	0xf1
 1531 0536 00       		.byte	0
 1532 0537 00       		.byte	0
 1533 0538 1C       		.uleb128 0x1c
 1534 0539 36010000 		.4byte	.LASF58
 1535 053d 01       		.byte	0x1
 1536 053e 1A       		.byte	0x1a
 1537 053f 49050000 		.4byte	0x549
 1538 0543 05       		.uleb128 0x5
 1539 0544 03       		.byte	0x3
 1540 0545 00000000 		.4byte	ADC_countsPer10Volt
 1541 0549 06       		.uleb128 0x6
 1542 054a 28050000 		.4byte	0x528
 1543 054e 1D       		.uleb128 0x1d
 1544 054f 9B020000 		.4byte	.LASF59
 1545 0553 03       		.byte	0x3
 1546 0554 49       		.byte	0x49
 1547 0555 64050000 		.4byte	0x564
 1548 0559 1E       		.uleb128 0x1e
 1549 055a 72000000 		.4byte	0x72
 1550 055e 1E       		.uleb128 0x1e
 1551 055f 72000000 		.4byte	0x72
 1552 0563 00       		.byte	0
 1553 0564 1F       		.uleb128 0x1f
 1554 0565 2A020000 		.4byte	.LASF65
 1555 0569 03       		.byte	0x3
 1556 056a 46       		.byte	0x46
 1557 056b DE000000 		.4byte	0xde
 1558 056f 7E050000 		.4byte	0x57e
 1559 0573 1E       		.uleb128 0x1e
 1560 0574 72000000 		.4byte	0x72
 1561 0578 1E       		.uleb128 0x1e
 1562 0579 DE000000 		.4byte	0xde
 1563 057d 00       		.byte	0
 1564 057e 1D       		.uleb128 0x1d
 1565 057f 50010000 		.4byte	.LASF60
 1566 0583 03       		.byte	0x3
 1567 0584 58       		.byte	0x58
 1568 0585 8F050000 		.4byte	0x58f
 1569 0589 1E       		.uleb128 0x1e
 1570 058a 7D000000 		.4byte	0x7d
 1571 058e 00       		.byte	0
 1572 058f 20       		.uleb128 0x20
 1573 0590 FC020000 		.4byte	.LASF66
 1574 0594 03       		.byte	0x3
 1575 0595 60       		.byte	0x60
 1576 0596 1E       		.uleb128 0x1e
 1577 0597 72000000 		.4byte	0x72
 1578 059b 00       		.byte	0
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 45


 1579 059c 00       		.byte	0
 1580              		.section	.debug_abbrev,"",%progbits
 1581              	.Ldebug_abbrev0:
 1582 0000 01       		.uleb128 0x1
 1583 0001 11       		.uleb128 0x11
 1584 0002 01       		.byte	0x1
 1585 0003 25       		.uleb128 0x25
 1586 0004 0E       		.uleb128 0xe
 1587 0005 13       		.uleb128 0x13
 1588 0006 0B       		.uleb128 0xb
 1589 0007 03       		.uleb128 0x3
 1590 0008 0E       		.uleb128 0xe
 1591 0009 1B       		.uleb128 0x1b
 1592 000a 0E       		.uleb128 0xe
 1593 000b 55       		.uleb128 0x55
 1594 000c 17       		.uleb128 0x17
 1595 000d 11       		.uleb128 0x11
 1596 000e 01       		.uleb128 0x1
 1597 000f 10       		.uleb128 0x10
 1598 0010 17       		.uleb128 0x17
 1599 0011 00       		.byte	0
 1600 0012 00       		.byte	0
 1601 0013 02       		.uleb128 0x2
 1602 0014 24       		.uleb128 0x24
 1603 0015 00       		.byte	0
 1604 0016 0B       		.uleb128 0xb
 1605 0017 0B       		.uleb128 0xb
 1606 0018 3E       		.uleb128 0x3e
 1607 0019 0B       		.uleb128 0xb
 1608 001a 03       		.uleb128 0x3
 1609 001b 0E       		.uleb128 0xe
 1610 001c 00       		.byte	0
 1611 001d 00       		.byte	0
 1612 001e 03       		.uleb128 0x3
 1613 001f 24       		.uleb128 0x24
 1614 0020 00       		.byte	0
 1615 0021 0B       		.uleb128 0xb
 1616 0022 0B       		.uleb128 0xb
 1617 0023 3E       		.uleb128 0x3e
 1618 0024 0B       		.uleb128 0xb
 1619 0025 03       		.uleb128 0x3
 1620 0026 08       		.uleb128 0x8
 1621 0027 00       		.byte	0
 1622 0028 00       		.byte	0
 1623 0029 04       		.uleb128 0x4
 1624 002a 16       		.uleb128 0x16
 1625 002b 00       		.byte	0
 1626 002c 03       		.uleb128 0x3
 1627 002d 0E       		.uleb128 0xe
 1628 002e 3A       		.uleb128 0x3a
 1629 002f 0B       		.uleb128 0xb
 1630 0030 3B       		.uleb128 0x3b
 1631 0031 0B       		.uleb128 0xb
 1632 0032 49       		.uleb128 0x49
 1633 0033 13       		.uleb128 0x13
 1634 0034 00       		.byte	0
 1635 0035 00       		.byte	0
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 46


 1636 0036 05       		.uleb128 0x5
 1637 0037 16       		.uleb128 0x16
 1638 0038 00       		.byte	0
 1639 0039 03       		.uleb128 0x3
 1640 003a 0E       		.uleb128 0xe
 1641 003b 3A       		.uleb128 0x3a
 1642 003c 0B       		.uleb128 0xb
 1643 003d 3B       		.uleb128 0x3b
 1644 003e 05       		.uleb128 0x5
 1645 003f 49       		.uleb128 0x49
 1646 0040 13       		.uleb128 0x13
 1647 0041 00       		.byte	0
 1648 0042 00       		.byte	0
 1649 0043 06       		.uleb128 0x6
 1650 0044 35       		.uleb128 0x35
 1651 0045 00       		.byte	0
 1652 0046 49       		.uleb128 0x49
 1653 0047 13       		.uleb128 0x13
 1654 0048 00       		.byte	0
 1655 0049 00       		.byte	0
 1656 004a 07       		.uleb128 0x7
 1657 004b 0F       		.uleb128 0xf
 1658 004c 00       		.byte	0
 1659 004d 0B       		.uleb128 0xb
 1660 004e 0B       		.uleb128 0xb
 1661 004f 49       		.uleb128 0x49
 1662 0050 13       		.uleb128 0x13
 1663 0051 00       		.byte	0
 1664 0052 00       		.byte	0
 1665 0053 08       		.uleb128 0x8
 1666 0054 15       		.uleb128 0x15
 1667 0055 00       		.byte	0
 1668 0056 27       		.uleb128 0x27
 1669 0057 19       		.uleb128 0x19
 1670 0058 00       		.byte	0
 1671 0059 00       		.byte	0
 1672 005a 09       		.uleb128 0x9
 1673 005b 2E       		.uleb128 0x2e
 1674 005c 00       		.byte	0
 1675 005d 3F       		.uleb128 0x3f
 1676 005e 19       		.uleb128 0x19
 1677 005f 03       		.uleb128 0x3
 1678 0060 0E       		.uleb128 0xe
 1679 0061 3A       		.uleb128 0x3a
 1680 0062 0B       		.uleb128 0xb
 1681 0063 3B       		.uleb128 0x3b
 1682 0064 05       		.uleb128 0x5
 1683 0065 27       		.uleb128 0x27
 1684 0066 19       		.uleb128 0x19
 1685 0067 20       		.uleb128 0x20
 1686 0068 0B       		.uleb128 0xb
 1687 0069 00       		.byte	0
 1688 006a 00       		.byte	0
 1689 006b 0A       		.uleb128 0xa
 1690 006c 2E       		.uleb128 0x2e
 1691 006d 01       		.byte	0x1
 1692 006e 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 47


 1693 006f 19       		.uleb128 0x19
 1694 0070 03       		.uleb128 0x3
 1695 0071 0E       		.uleb128 0xe
 1696 0072 3A       		.uleb128 0x3a
 1697 0073 0B       		.uleb128 0xb
 1698 0074 3B       		.uleb128 0x3b
 1699 0075 0B       		.uleb128 0xb
 1700 0076 27       		.uleb128 0x27
 1701 0077 19       		.uleb128 0x19
 1702 0078 11       		.uleb128 0x11
 1703 0079 01       		.uleb128 0x1
 1704 007a 12       		.uleb128 0x12
 1705 007b 06       		.uleb128 0x6
 1706 007c 40       		.uleb128 0x40
 1707 007d 18       		.uleb128 0x18
 1708 007e 9742     		.uleb128 0x2117
 1709 0080 19       		.uleb128 0x19
 1710 0081 01       		.uleb128 0x1
 1711 0082 13       		.uleb128 0x13
 1712 0083 00       		.byte	0
 1713 0084 00       		.byte	0
 1714 0085 0B       		.uleb128 0xb
 1715 0086 34       		.uleb128 0x34
 1716 0087 00       		.byte	0
 1717 0088 03       		.uleb128 0x3
 1718 0089 0E       		.uleb128 0xe
 1719 008a 3A       		.uleb128 0x3a
 1720 008b 0B       		.uleb128 0xb
 1721 008c 3B       		.uleb128 0x3b
 1722 008d 0B       		.uleb128 0xb
 1723 008e 49       		.uleb128 0x49
 1724 008f 13       		.uleb128 0x13
 1725 0090 02       		.uleb128 0x2
 1726 0091 17       		.uleb128 0x17
 1727 0092 00       		.byte	0
 1728 0093 00       		.byte	0
 1729 0094 0C       		.uleb128 0xc
 1730 0095 34       		.uleb128 0x34
 1731 0096 00       		.byte	0
 1732 0097 03       		.uleb128 0x3
 1733 0098 0E       		.uleb128 0xe
 1734 0099 3A       		.uleb128 0x3a
 1735 009a 0B       		.uleb128 0xb
 1736 009b 3B       		.uleb128 0x3b
 1737 009c 0B       		.uleb128 0xb
 1738 009d 49       		.uleb128 0x49
 1739 009e 13       		.uleb128 0x13
 1740 009f 1C       		.uleb128 0x1c
 1741 00a0 05       		.uleb128 0x5
 1742 00a1 00       		.byte	0
 1743 00a2 00       		.byte	0
 1744 00a3 0D       		.uleb128 0xd
 1745 00a4 898201   		.uleb128 0x4109
 1746 00a7 01       		.byte	0x1
 1747 00a8 11       		.uleb128 0x11
 1748 00a9 01       		.uleb128 0x1
 1749 00aa 31       		.uleb128 0x31
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 48


 1750 00ab 13       		.uleb128 0x13
 1751 00ac 01       		.uleb128 0x1
 1752 00ad 13       		.uleb128 0x13
 1753 00ae 00       		.byte	0
 1754 00af 00       		.byte	0
 1755 00b0 0E       		.uleb128 0xe
 1756 00b1 8A8201   		.uleb128 0x410a
 1757 00b4 00       		.byte	0
 1758 00b5 02       		.uleb128 0x2
 1759 00b6 18       		.uleb128 0x18
 1760 00b7 9142     		.uleb128 0x2111
 1761 00b9 18       		.uleb128 0x18
 1762 00ba 00       		.byte	0
 1763 00bb 00       		.byte	0
 1764 00bc 0F       		.uleb128 0xf
 1765 00bd 898201   		.uleb128 0x4109
 1766 00c0 01       		.byte	0x1
 1767 00c1 11       		.uleb128 0x11
 1768 00c2 01       		.uleb128 0x1
 1769 00c3 31       		.uleb128 0x31
 1770 00c4 13       		.uleb128 0x13
 1771 00c5 00       		.byte	0
 1772 00c6 00       		.byte	0
 1773 00c7 10       		.uleb128 0x10
 1774 00c8 2E       		.uleb128 0x2e
 1775 00c9 01       		.byte	0x1
 1776 00ca 31       		.uleb128 0x31
 1777 00cb 13       		.uleb128 0x13
 1778 00cc 11       		.uleb128 0x11
 1779 00cd 01       		.uleb128 0x1
 1780 00ce 12       		.uleb128 0x12
 1781 00cf 06       		.uleb128 0x6
 1782 00d0 40       		.uleb128 0x40
 1783 00d1 18       		.uleb128 0x18
 1784 00d2 9742     		.uleb128 0x2117
 1785 00d4 19       		.uleb128 0x19
 1786 00d5 01       		.uleb128 0x1
 1787 00d6 13       		.uleb128 0x13
 1788 00d7 00       		.byte	0
 1789 00d8 00       		.byte	0
 1790 00d9 11       		.uleb128 0x11
 1791 00da 898201   		.uleb128 0x4109
 1792 00dd 00       		.byte	0
 1793 00de 11       		.uleb128 0x11
 1794 00df 01       		.uleb128 0x1
 1795 00e0 31       		.uleb128 0x31
 1796 00e1 13       		.uleb128 0x13
 1797 00e2 00       		.byte	0
 1798 00e3 00       		.byte	0
 1799 00e4 12       		.uleb128 0x12
 1800 00e5 2E       		.uleb128 0x2e
 1801 00e6 00       		.byte	0
 1802 00e7 3F       		.uleb128 0x3f
 1803 00e8 19       		.uleb128 0x19
 1804 00e9 03       		.uleb128 0x3
 1805 00ea 0E       		.uleb128 0xe
 1806 00eb 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 49


 1807 00ec 0B       		.uleb128 0xb
 1808 00ed 3B       		.uleb128 0x3b
 1809 00ee 05       		.uleb128 0x5
 1810 00ef 27       		.uleb128 0x27
 1811 00f0 19       		.uleb128 0x19
 1812 00f1 11       		.uleb128 0x11
 1813 00f2 01       		.uleb128 0x1
 1814 00f3 12       		.uleb128 0x12
 1815 00f4 06       		.uleb128 0x6
 1816 00f5 40       		.uleb128 0x40
 1817 00f6 18       		.uleb128 0x18
 1818 00f7 9742     		.uleb128 0x2117
 1819 00f9 19       		.uleb128 0x19
 1820 00fa 00       		.byte	0
 1821 00fb 00       		.byte	0
 1822 00fc 13       		.uleb128 0x13
 1823 00fd 2E       		.uleb128 0x2e
 1824 00fe 01       		.byte	0x1
 1825 00ff 3F       		.uleb128 0x3f
 1826 0100 19       		.uleb128 0x19
 1827 0101 03       		.uleb128 0x3
 1828 0102 0E       		.uleb128 0xe
 1829 0103 3A       		.uleb128 0x3a
 1830 0104 0B       		.uleb128 0xb
 1831 0105 3B       		.uleb128 0x3b
 1832 0106 05       		.uleb128 0x5
 1833 0107 27       		.uleb128 0x27
 1834 0108 19       		.uleb128 0x19
 1835 0109 49       		.uleb128 0x49
 1836 010a 13       		.uleb128 0x13
 1837 010b 11       		.uleb128 0x11
 1838 010c 01       		.uleb128 0x1
 1839 010d 12       		.uleb128 0x12
 1840 010e 06       		.uleb128 0x6
 1841 010f 40       		.uleb128 0x40
 1842 0110 18       		.uleb128 0x18
 1843 0111 9742     		.uleb128 0x2117
 1844 0113 19       		.uleb128 0x19
 1845 0114 01       		.uleb128 0x1
 1846 0115 13       		.uleb128 0x13
 1847 0116 00       		.byte	0
 1848 0117 00       		.byte	0
 1849 0118 14       		.uleb128 0x14
 1850 0119 05       		.uleb128 0x5
 1851 011a 00       		.byte	0
 1852 011b 03       		.uleb128 0x3
 1853 011c 0E       		.uleb128 0xe
 1854 011d 3A       		.uleb128 0x3a
 1855 011e 0B       		.uleb128 0xb
 1856 011f 3B       		.uleb128 0x3b
 1857 0120 05       		.uleb128 0x5
 1858 0121 49       		.uleb128 0x49
 1859 0122 13       		.uleb128 0x13
 1860 0123 02       		.uleb128 0x2
 1861 0124 17       		.uleb128 0x17
 1862 0125 00       		.byte	0
 1863 0126 00       		.byte	0
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 50


 1864 0127 15       		.uleb128 0x15
 1865 0128 34       		.uleb128 0x34
 1866 0129 00       		.byte	0
 1867 012a 03       		.uleb128 0x3
 1868 012b 0E       		.uleb128 0xe
 1869 012c 3A       		.uleb128 0x3a
 1870 012d 0B       		.uleb128 0xb
 1871 012e 3B       		.uleb128 0x3b
 1872 012f 05       		.uleb128 0x5
 1873 0130 49       		.uleb128 0x49
 1874 0131 13       		.uleb128 0x13
 1875 0132 02       		.uleb128 0x2
 1876 0133 17       		.uleb128 0x17
 1877 0134 00       		.byte	0
 1878 0135 00       		.byte	0
 1879 0136 16       		.uleb128 0x16
 1880 0137 2E       		.uleb128 0x2e
 1881 0138 01       		.byte	0x1
 1882 0139 3F       		.uleb128 0x3f
 1883 013a 19       		.uleb128 0x19
 1884 013b 03       		.uleb128 0x3
 1885 013c 0E       		.uleb128 0xe
 1886 013d 3A       		.uleb128 0x3a
 1887 013e 0B       		.uleb128 0xb
 1888 013f 3B       		.uleb128 0x3b
 1889 0140 05       		.uleb128 0x5
 1890 0141 27       		.uleb128 0x27
 1891 0142 19       		.uleb128 0x19
 1892 0143 11       		.uleb128 0x11
 1893 0144 01       		.uleb128 0x1
 1894 0145 12       		.uleb128 0x12
 1895 0146 06       		.uleb128 0x6
 1896 0147 40       		.uleb128 0x40
 1897 0148 18       		.uleb128 0x18
 1898 0149 9742     		.uleb128 0x2117
 1899 014b 19       		.uleb128 0x19
 1900 014c 01       		.uleb128 0x1
 1901 014d 13       		.uleb128 0x13
 1902 014e 00       		.byte	0
 1903 014f 00       		.byte	0
 1904 0150 17       		.uleb128 0x17
 1905 0151 2E       		.uleb128 0x2e
 1906 0152 01       		.byte	0x1
 1907 0153 3F       		.uleb128 0x3f
 1908 0154 19       		.uleb128 0x19
 1909 0155 03       		.uleb128 0x3
 1910 0156 0E       		.uleb128 0xe
 1911 0157 3A       		.uleb128 0x3a
 1912 0158 0B       		.uleb128 0xb
 1913 0159 3B       		.uleb128 0x3b
 1914 015a 05       		.uleb128 0x5
 1915 015b 27       		.uleb128 0x27
 1916 015c 19       		.uleb128 0x19
 1917 015d 49       		.uleb128 0x49
 1918 015e 13       		.uleb128 0x13
 1919 015f 11       		.uleb128 0x11
 1920 0160 01       		.uleb128 0x1
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 51


 1921 0161 12       		.uleb128 0x12
 1922 0162 06       		.uleb128 0x6
 1923 0163 40       		.uleb128 0x40
 1924 0164 18       		.uleb128 0x18
 1925 0165 9642     		.uleb128 0x2116
 1926 0167 19       		.uleb128 0x19
 1927 0168 01       		.uleb128 0x1
 1928 0169 13       		.uleb128 0x13
 1929 016a 00       		.byte	0
 1930 016b 00       		.byte	0
 1931 016c 18       		.uleb128 0x18
 1932 016d 01       		.uleb128 0x1
 1933 016e 01       		.byte	0x1
 1934 016f 49       		.uleb128 0x49
 1935 0170 13       		.uleb128 0x13
 1936 0171 01       		.uleb128 0x1
 1937 0172 13       		.uleb128 0x13
 1938 0173 00       		.byte	0
 1939 0174 00       		.byte	0
 1940 0175 19       		.uleb128 0x19
 1941 0176 21       		.uleb128 0x21
 1942 0177 00       		.byte	0
 1943 0178 49       		.uleb128 0x49
 1944 0179 13       		.uleb128 0x13
 1945 017a 2F       		.uleb128 0x2f
 1946 017b 0B       		.uleb128 0xb
 1947 017c 00       		.byte	0
 1948 017d 00       		.byte	0
 1949 017e 1A       		.uleb128 0x1a
 1950 017f 34       		.uleb128 0x34
 1951 0180 00       		.byte	0
 1952 0181 03       		.uleb128 0x3
 1953 0182 0E       		.uleb128 0xe
 1954 0183 3A       		.uleb128 0x3a
 1955 0184 0B       		.uleb128 0xb
 1956 0185 3B       		.uleb128 0x3b
 1957 0186 0B       		.uleb128 0xb
 1958 0187 49       		.uleb128 0x49
 1959 0188 13       		.uleb128 0x13
 1960 0189 1C       		.uleb128 0x1c
 1961 018a 0A       		.uleb128 0xa
 1962 018b 00       		.byte	0
 1963 018c 00       		.byte	0
 1964 018d 1B       		.uleb128 0x1b
 1965 018e 26       		.uleb128 0x26
 1966 018f 00       		.byte	0
 1967 0190 49       		.uleb128 0x49
 1968 0191 13       		.uleb128 0x13
 1969 0192 00       		.byte	0
 1970 0193 00       		.byte	0
 1971 0194 1C       		.uleb128 0x1c
 1972 0195 34       		.uleb128 0x34
 1973 0196 00       		.byte	0
 1974 0197 03       		.uleb128 0x3
 1975 0198 0E       		.uleb128 0xe
 1976 0199 3A       		.uleb128 0x3a
 1977 019a 0B       		.uleb128 0xb
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 52


 1978 019b 3B       		.uleb128 0x3b
 1979 019c 0B       		.uleb128 0xb
 1980 019d 49       		.uleb128 0x49
 1981 019e 13       		.uleb128 0x13
 1982 019f 3F       		.uleb128 0x3f
 1983 01a0 19       		.uleb128 0x19
 1984 01a1 02       		.uleb128 0x2
 1985 01a2 18       		.uleb128 0x18
 1986 01a3 00       		.byte	0
 1987 01a4 00       		.byte	0
 1988 01a5 1D       		.uleb128 0x1d
 1989 01a6 2E       		.uleb128 0x2e
 1990 01a7 01       		.byte	0x1
 1991 01a8 3F       		.uleb128 0x3f
 1992 01a9 19       		.uleb128 0x19
 1993 01aa 03       		.uleb128 0x3
 1994 01ab 0E       		.uleb128 0xe
 1995 01ac 3A       		.uleb128 0x3a
 1996 01ad 0B       		.uleb128 0xb
 1997 01ae 3B       		.uleb128 0x3b
 1998 01af 0B       		.uleb128 0xb
 1999 01b0 27       		.uleb128 0x27
 2000 01b1 19       		.uleb128 0x19
 2001 01b2 3C       		.uleb128 0x3c
 2002 01b3 19       		.uleb128 0x19
 2003 01b4 01       		.uleb128 0x1
 2004 01b5 13       		.uleb128 0x13
 2005 01b6 00       		.byte	0
 2006 01b7 00       		.byte	0
 2007 01b8 1E       		.uleb128 0x1e
 2008 01b9 05       		.uleb128 0x5
 2009 01ba 00       		.byte	0
 2010 01bb 49       		.uleb128 0x49
 2011 01bc 13       		.uleb128 0x13
 2012 01bd 00       		.byte	0
 2013 01be 00       		.byte	0
 2014 01bf 1F       		.uleb128 0x1f
 2015 01c0 2E       		.uleb128 0x2e
 2016 01c1 01       		.byte	0x1
 2017 01c2 3F       		.uleb128 0x3f
 2018 01c3 19       		.uleb128 0x19
 2019 01c4 03       		.uleb128 0x3
 2020 01c5 0E       		.uleb128 0xe
 2021 01c6 3A       		.uleb128 0x3a
 2022 01c7 0B       		.uleb128 0xb
 2023 01c8 3B       		.uleb128 0x3b
 2024 01c9 0B       		.uleb128 0xb
 2025 01ca 27       		.uleb128 0x27
 2026 01cb 19       		.uleb128 0x19
 2027 01cc 49       		.uleb128 0x49
 2028 01cd 13       		.uleb128 0x13
 2029 01ce 3C       		.uleb128 0x3c
 2030 01cf 19       		.uleb128 0x19
 2031 01d0 01       		.uleb128 0x1
 2032 01d1 13       		.uleb128 0x13
 2033 01d2 00       		.byte	0
 2034 01d3 00       		.byte	0
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 53


 2035 01d4 20       		.uleb128 0x20
 2036 01d5 2E       		.uleb128 0x2e
 2037 01d6 01       		.byte	0x1
 2038 01d7 3F       		.uleb128 0x3f
 2039 01d8 19       		.uleb128 0x19
 2040 01d9 03       		.uleb128 0x3
 2041 01da 0E       		.uleb128 0xe
 2042 01db 3A       		.uleb128 0x3a
 2043 01dc 0B       		.uleb128 0xb
 2044 01dd 3B       		.uleb128 0x3b
 2045 01de 0B       		.uleb128 0xb
 2046 01df 27       		.uleb128 0x27
 2047 01e0 19       		.uleb128 0x19
 2048 01e1 3C       		.uleb128 0x3c
 2049 01e2 19       		.uleb128 0x19
 2050 01e3 00       		.byte	0
 2051 01e4 00       		.byte	0
 2052 01e5 00       		.byte	0
 2053              		.section	.debug_loc,"",%progbits
 2054              	.Ldebug_loc0:
 2055              	.LLST0:
 2056 0000 76000000 		.4byte	.LVL5
 2057 0004 84000000 		.4byte	.LVL7
 2058 0008 0200     		.2byte	0x2
 2059 000a 30       		.byte	0x30
 2060 000b 9F       		.byte	0x9f
 2061 000c 84000000 		.4byte	.LVL7
 2062 0010 EC000000 		.4byte	.LFE1
 2063 0014 0200     		.2byte	0x2
 2064 0016 31       		.byte	0x31
 2065 0017 9F       		.byte	0x9f
 2066 0018 00000000 		.4byte	0
 2067 001c 00000000 		.4byte	0
 2068              	.LLST1:
 2069 0020 6E000000 		.4byte	.LVL2
 2070 0024 76000000 		.4byte	.LVL5
 2071 0028 0100     		.2byte	0x1
 2072 002a 52       		.byte	0x52
 2073 002b 76000000 		.4byte	.LVL5
 2074 002f EC000000 		.4byte	.LFE1
 2075 0033 0200     		.2byte	0x2
 2076 0035 30       		.byte	0x30
 2077 0036 9F       		.byte	0x9f
 2078 0037 00000000 		.4byte	0
 2079 003b 00000000 		.4byte	0
 2080              	.LLST2:
 2081 003f 00000000 		.4byte	.LVL11
 2082 0043 06000000 		.4byte	.LVL12
 2083 0047 0100     		.2byte	0x1
 2084 0049 50       		.byte	0x50
 2085 004a 06000000 		.4byte	.LVL12
 2086 004e 20000000 		.4byte	.LVL17
 2087 0052 0100     		.2byte	0x1
 2088 0054 54       		.byte	0x54
 2089 0055 20000000 		.4byte	.LVL17
 2090 0059 28000000 		.4byte	.LFE6
 2091 005d 0400     		.2byte	0x4
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 54


 2092 005f F3       		.byte	0xf3
 2093 0060 01       		.uleb128 0x1
 2094 0061 50       		.byte	0x50
 2095 0062 9F       		.byte	0x9f
 2096 0063 00000000 		.4byte	0
 2097 0067 00000000 		.4byte	0
 2098              	.LLST3:
 2099 006b 00000000 		.4byte	.LVL11
 2100 006f 0A000000 		.4byte	.LVL13
 2101 0073 0200     		.2byte	0x2
 2102 0075 30       		.byte	0x30
 2103 0076 9F       		.byte	0x9f
 2104 0077 14000000 		.4byte	.LVL14
 2105 007b 1E000000 		.4byte	.LVL15
 2106 007f 0100     		.2byte	0x1
 2107 0081 50       		.byte	0x50
 2108 0082 1E000000 		.4byte	.LVL15
 2109 0086 20000000 		.4byte	.LVL16
 2110 008a 0200     		.2byte	0x2
 2111 008c 31       		.byte	0x31
 2112 008d 9F       		.byte	0x9f
 2113 008e 00000000 		.4byte	0
 2114 0092 00000000 		.4byte	0
 2115              	.LLST4:
 2116 0096 00000000 		.4byte	.LVL18
 2117 009a 08000000 		.4byte	.LVL19
 2118 009e 0100     		.2byte	0x1
 2119 00a0 50       		.byte	0x50
 2120 00a1 08000000 		.4byte	.LVL19
 2121 00a5 10000000 		.4byte	.LVL21
 2122 00a9 0400     		.2byte	0x4
 2123 00ab F3       		.byte	0xf3
 2124 00ac 01       		.uleb128 0x1
 2125 00ad 50       		.byte	0x50
 2126 00ae 9F       		.byte	0x9f
 2127 00af 10000000 		.4byte	.LVL21
 2128 00b3 14000000 		.4byte	.LVL22
 2129 00b7 0100     		.2byte	0x1
 2130 00b9 50       		.byte	0x50
 2131 00ba 14000000 		.4byte	.LVL22
 2132 00be 20000000 		.4byte	.LFE7
 2133 00c2 0400     		.2byte	0x4
 2134 00c4 F3       		.byte	0xf3
 2135 00c5 01       		.uleb128 0x1
 2136 00c6 50       		.byte	0x50
 2137 00c7 9F       		.byte	0x9f
 2138 00c8 00000000 		.4byte	0
 2139 00cc 00000000 		.4byte	0
 2140              	.LLST5:
 2141 00d0 16000000 		.4byte	.LVL23
 2142 00d4 18000000 		.4byte	.LVL24
 2143 00d8 0100     		.2byte	0x1
 2144 00da 50       		.byte	0x50
 2145 00db 00000000 		.4byte	0
 2146 00df 00000000 		.4byte	0
 2147              	.LLST6:
 2148 00e3 00000000 		.4byte	.LVL25
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 55


 2149 00e7 04000000 		.4byte	.LVL26
 2150 00eb 0100     		.2byte	0x1
 2151 00ed 50       		.byte	0x50
 2152 00ee 04000000 		.4byte	.LVL26
 2153 00f2 10000000 		.4byte	.LFE8
 2154 00f6 0400     		.2byte	0x4
 2155 00f8 F3       		.byte	0xf3
 2156 00f9 01       		.uleb128 0x1
 2157 00fa 50       		.byte	0x50
 2158 00fb 9F       		.byte	0x9f
 2159 00fc 00000000 		.4byte	0
 2160 0100 00000000 		.4byte	0
 2161              	.LLST7:
 2162 0104 00000000 		.4byte	.LVL27
 2163 0108 04000000 		.4byte	.LVL28
 2164 010c 0100     		.2byte	0x1
 2165 010e 50       		.byte	0x50
 2166 010f 04000000 		.4byte	.LVL28
 2167 0113 18000000 		.4byte	.LFE9
 2168 0117 0400     		.2byte	0x4
 2169 0119 F3       		.byte	0xf3
 2170 011a 01       		.uleb128 0x1
 2171 011b 50       		.byte	0x50
 2172 011c 9F       		.byte	0x9f
 2173 011d 00000000 		.4byte	0
 2174 0121 00000000 		.4byte	0
 2175              	.LLST8:
 2176 0125 00000000 		.4byte	.LVL29
 2177 0129 04000000 		.4byte	.LVL30
 2178 012d 0100     		.2byte	0x1
 2179 012f 50       		.byte	0x50
 2180 0130 04000000 		.4byte	.LVL30
 2181 0134 18000000 		.4byte	.LFE10
 2182 0138 0400     		.2byte	0x4
 2183 013a F3       		.byte	0xf3
 2184 013b 01       		.uleb128 0x1
 2185 013c 50       		.byte	0x50
 2186 013d 9F       		.byte	0x9f
 2187 013e 00000000 		.4byte	0
 2188 0142 00000000 		.4byte	0
 2189              	.LLST9:
 2190 0146 00000000 		.4byte	.LVL31
 2191 014a 04000000 		.4byte	.LVL32
 2192 014e 0100     		.2byte	0x1
 2193 0150 50       		.byte	0x50
 2194 0151 04000000 		.4byte	.LVL32
 2195 0155 10000000 		.4byte	.LFE11
 2196 0159 0400     		.2byte	0x4
 2197 015b F3       		.byte	0xf3
 2198 015c 01       		.uleb128 0x1
 2199 015d 50       		.byte	0x50
 2200 015e 9F       		.byte	0x9f
 2201 015f 00000000 		.4byte	0
 2202 0163 00000000 		.4byte	0
 2203              	.LLST10:
 2204 0167 00000000 		.4byte	.LVL33
 2205 016b 04000000 		.4byte	.LVL34
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 56


 2206 016f 0100     		.2byte	0x1
 2207 0171 50       		.byte	0x50
 2208 0172 04000000 		.4byte	.LVL34
 2209 0176 10000000 		.4byte	.LFE12
 2210 017a 0400     		.2byte	0x4
 2211 017c F3       		.byte	0xf3
 2212 017d 01       		.uleb128 0x1
 2213 017e 50       		.byte	0x50
 2214 017f 9F       		.byte	0x9f
 2215 0180 00000000 		.4byte	0
 2216 0184 00000000 		.4byte	0
 2217              	.LLST11:
 2218 0188 00000000 		.4byte	.LVL35
 2219 018c 0C000000 		.4byte	.LVL36
 2220 0190 0100     		.2byte	0x1
 2221 0192 50       		.byte	0x50
 2222 0193 0C000000 		.4byte	.LVL36
 2223 0197 14000000 		.4byte	.LVL38
 2224 019b 0100     		.2byte	0x1
 2225 019d 54       		.byte	0x54
 2226 019e 14000000 		.4byte	.LVL38
 2227 01a2 1C000000 		.4byte	.LFE13
 2228 01a6 0400     		.2byte	0x4
 2229 01a8 F3       		.byte	0xf3
 2230 01a9 01       		.uleb128 0x1
 2231 01aa 50       		.byte	0x50
 2232 01ab 9F       		.byte	0x9f
 2233 01ac 00000000 		.4byte	0
 2234 01b0 00000000 		.4byte	0
 2235              	.LLST12:
 2236 01b4 00000000 		.4byte	.LVL35
 2237 01b8 0F000000 		.4byte	.LVL37-1
 2238 01bc 0100     		.2byte	0x1
 2239 01be 51       		.byte	0x51
 2240 01bf 0F000000 		.4byte	.LVL37-1
 2241 01c3 1C000000 		.4byte	.LFE13
 2242 01c7 0400     		.2byte	0x4
 2243 01c9 F3       		.byte	0xf3
 2244 01ca 01       		.uleb128 0x1
 2245 01cb 51       		.byte	0x51
 2246 01cc 9F       		.byte	0x9f
 2247 01cd 00000000 		.4byte	0
 2248 01d1 00000000 		.4byte	0
 2249              	.LLST13:
 2250 01d5 00000000 		.4byte	.LVL39
 2251 01d9 0C000000 		.4byte	.LVL40
 2252 01dd 0100     		.2byte	0x1
 2253 01df 50       		.byte	0x50
 2254 01e0 0C000000 		.4byte	.LVL40
 2255 01e4 14000000 		.4byte	.LVL42
 2256 01e8 0100     		.2byte	0x1
 2257 01ea 54       		.byte	0x54
 2258 01eb 14000000 		.4byte	.LVL42
 2259 01ef 1C000000 		.4byte	.LFE14
 2260 01f3 0400     		.2byte	0x4
 2261 01f5 F3       		.byte	0xf3
 2262 01f6 01       		.uleb128 0x1
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 57


 2263 01f7 50       		.byte	0x50
 2264 01f8 9F       		.byte	0x9f
 2265 01f9 00000000 		.4byte	0
 2266 01fd 00000000 		.4byte	0
 2267              	.LLST14:
 2268 0201 00000000 		.4byte	.LVL39
 2269 0205 0F000000 		.4byte	.LVL41-1
 2270 0209 0100     		.2byte	0x1
 2271 020b 51       		.byte	0x51
 2272 020c 0F000000 		.4byte	.LVL41-1
 2273 0210 16000000 		.4byte	.LVL43
 2274 0214 0100     		.2byte	0x1
 2275 0216 55       		.byte	0x55
 2276 0217 16000000 		.4byte	.LVL43
 2277 021b 1C000000 		.4byte	.LFE14
 2278 021f 0800     		.2byte	0x8
 2279 0221 F3       		.byte	0xf3
 2280 0222 01       		.uleb128 0x1
 2281 0223 50       		.byte	0x50
 2282 0224 32       		.byte	0x32
 2283 0225 24       		.byte	0x24
 2284 0226 73       		.byte	0x73
 2285 0227 00       		.sleb128 0
 2286 0228 22       		.byte	0x22
 2287 0229 00000000 		.4byte	0
 2288 022d 00000000 		.4byte	0
 2289              	.LLST15:
 2290 0231 00000000 		.4byte	.LVL44
 2291 0235 0C000000 		.4byte	.LVL45
 2292 0239 0100     		.2byte	0x1
 2293 023b 50       		.byte	0x50
 2294 023c 0C000000 		.4byte	.LVL45
 2295 0240 18000000 		.4byte	.LVL47
 2296 0244 0100     		.2byte	0x1
 2297 0246 54       		.byte	0x54
 2298 0247 18000000 		.4byte	.LVL47
 2299 024b 50000000 		.4byte	.LFE15
 2300 024f 0400     		.2byte	0x4
 2301 0251 F3       		.byte	0xf3
 2302 0252 01       		.uleb128 0x1
 2303 0253 50       		.byte	0x50
 2304 0254 9F       		.byte	0x9f
 2305 0255 00000000 		.4byte	0
 2306 0259 00000000 		.4byte	0
 2307              	.LLST16:
 2308 025d 00000000 		.4byte	.LVL44
 2309 0261 0F000000 		.4byte	.LVL46-1
 2310 0265 0100     		.2byte	0x1
 2311 0267 51       		.byte	0x51
 2312 0268 0F000000 		.4byte	.LVL46-1
 2313 026c 22000000 		.4byte	.LVL48
 2314 0270 0400     		.2byte	0x4
 2315 0272 F3       		.byte	0xf3
 2316 0273 01       		.uleb128 0x1
 2317 0274 51       		.byte	0x51
 2318 0275 9F       		.byte	0x9f
 2319 0276 22000000 		.4byte	.LVL48
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 58


 2320 027a 38000000 		.4byte	.LVL49
 2321 027e 0100     		.2byte	0x1
 2322 0280 51       		.byte	0x51
 2323 0281 00000000 		.4byte	0
 2324 0285 00000000 		.4byte	0
 2325              	.LLST17:
 2326 0289 38000000 		.4byte	.LVL49
 2327 028d 3A000000 		.4byte	.LVL50
 2328 0291 0900     		.2byte	0x9
 2329 0293 70       		.byte	0x70
 2330 0294 00       		.sleb128 0
 2331 0295 73       		.byte	0x73
 2332 0296 00       		.sleb128 0
 2333 0297 22       		.byte	0x22
 2334 0298 71       		.byte	0x71
 2335 0299 00       		.sleb128 0
 2336 029a 1B       		.byte	0x1b
 2337 029b 9F       		.byte	0x9f
 2338 029c 00000000 		.4byte	0
 2339 02a0 00000000 		.4byte	0
 2340              	.LLST18:
 2341 02a4 00000000 		.4byte	.LVL52
 2342 02a8 0C000000 		.4byte	.LVL53
 2343 02ac 0100     		.2byte	0x1
 2344 02ae 50       		.byte	0x50
 2345 02af 0C000000 		.4byte	.LVL53
 2346 02b3 1C000000 		.4byte	.LVL56
 2347 02b7 0100     		.2byte	0x1
 2348 02b9 55       		.byte	0x55
 2349 02ba 1C000000 		.4byte	.LVL56
 2350 02be 40000000 		.4byte	.LFE16
 2351 02c2 0400     		.2byte	0x4
 2352 02c4 F3       		.byte	0xf3
 2353 02c5 01       		.uleb128 0x1
 2354 02c6 50       		.byte	0x50
 2355 02c7 9F       		.byte	0x9f
 2356 02c8 00000000 		.4byte	0
 2357 02cc 00000000 		.4byte	0
 2358              	.LLST19:
 2359 02d0 00000000 		.4byte	.LVL52
 2360 02d4 0F000000 		.4byte	.LVL54-1
 2361 02d8 0100     		.2byte	0x1
 2362 02da 51       		.byte	0x51
 2363 02db 0F000000 		.4byte	.LVL54-1
 2364 02df 1A000000 		.4byte	.LVL55
 2365 02e3 0400     		.2byte	0x4
 2366 02e5 F3       		.byte	0xf3
 2367 02e6 01       		.uleb128 0x1
 2368 02e7 51       		.byte	0x51
 2369 02e8 9F       		.byte	0x9f
 2370 02e9 1A000000 		.4byte	.LVL55
 2371 02ed 32000000 		.4byte	.LVL60
 2372 02f1 0100     		.2byte	0x1
 2373 02f3 54       		.byte	0x54
 2374 02f4 00000000 		.4byte	0
 2375 02f8 00000000 		.4byte	0
 2376              	.LLST20:
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 59


 2377 02fc 1E000000 		.4byte	.LVL57
 2378 0300 32000000 		.4byte	.LVL60
 2379 0304 1A00     		.2byte	0x1a
 2380 0306 74       		.byte	0x74
 2381 0307 00       		.sleb128 0
 2382 0308 F7       		.byte	0xf7
 2383 0309 41       		.uleb128 0x41
 2384 030a F7       		.byte	0xf7
 2385 030b 25       		.uleb128 0x25
 2386 030c 0C       		.byte	0xc
 2387 030d 80969800 		.4byte	0x989680
 2388 0311 F7       		.byte	0xf7
 2389 0312 25       		.uleb128 0x25
 2390 0313 1E       		.byte	0x1e
 2391 0314 F7       		.byte	0xf7
 2392 0315 33       		.uleb128 0x33
 2393 0316 75       		.byte	0x75
 2394 0317 00       		.sleb128 0
 2395 0318 F7       		.byte	0xf7
 2396 0319 3A       		.uleb128 0x3a
 2397 031a F7       		.byte	0xf7
 2398 031b 33       		.uleb128 0x33
 2399 031c 1B       		.byte	0x1b
 2400 031d F7       		.byte	0xf7
 2401 031e 25       		.uleb128 0x25
 2402 031f 9F       		.byte	0x9f
 2403 0320 00000000 		.4byte	0
 2404 0324 00000000 		.4byte	0
 2405              	.LLST21:
 2406 0328 00000000 		.4byte	.LVL61
 2407 032c 0C000000 		.4byte	.LVL62
 2408 0330 0100     		.2byte	0x1
 2409 0332 50       		.byte	0x50
 2410 0333 0C000000 		.4byte	.LVL62
 2411 0337 1E000000 		.4byte	.LVL65
 2412 033b 0100     		.2byte	0x1
 2413 033d 55       		.byte	0x55
 2414 033e 1E000000 		.4byte	.LVL65
 2415 0342 48000000 		.4byte	.LFE17
 2416 0346 0400     		.2byte	0x4
 2417 0348 F3       		.byte	0xf3
 2418 0349 01       		.uleb128 0x1
 2419 034a 50       		.byte	0x50
 2420 034b 9F       		.byte	0x9f
 2421 034c 00000000 		.4byte	0
 2422 0350 00000000 		.4byte	0
 2423              	.LLST22:
 2424 0354 00000000 		.4byte	.LVL61
 2425 0358 0F000000 		.4byte	.LVL63-1
 2426 035c 0100     		.2byte	0x1
 2427 035e 51       		.byte	0x51
 2428 035f 0F000000 		.4byte	.LVL63-1
 2429 0363 1A000000 		.4byte	.LVL64
 2430 0367 0400     		.2byte	0x4
 2431 0369 F3       		.byte	0xf3
 2432 036a 01       		.uleb128 0x1
 2433 036b 51       		.byte	0x51
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 60


 2434 036c 9F       		.byte	0x9f
 2435 036d 1A000000 		.4byte	.LVL64
 2436 0371 2C000000 		.4byte	.LVL69
 2437 0375 0100     		.2byte	0x1
 2438 0377 54       		.byte	0x54
 2439 0378 00000000 		.4byte	0
 2440 037c 00000000 		.4byte	0
 2441              	.LLST23:
 2442 0380 20000000 		.4byte	.LVL66
 2443 0384 2C000000 		.4byte	.LVL69
 2444 0388 1600     		.2byte	0x16
 2445 038a 74       		.byte	0x74
 2446 038b 00       		.sleb128 0
 2447 038c F7       		.byte	0xf7
 2448 038d 41       		.uleb128 0x41
 2449 038e F7       		.byte	0xf7
 2450 038f 2C       		.uleb128 0x2c
 2451 0390 F4       		.byte	0xf4
 2452 0391 2C       		.uleb128 0x2c
 2453 0392 04       		.byte	0x4
 2454 0393 00002041 		.4byte	0x41200000
 2455 0397 1E       		.byte	0x1e
 2456 0398 75       		.byte	0x75
 2457 0399 00       		.sleb128 0
 2458 039a F7       		.byte	0xf7
 2459 039b 3A       		.uleb128 0x3a
 2460 039c F7       		.byte	0xf7
 2461 039d 2C       		.uleb128 0x2c
 2462 039e 1B       		.byte	0x1b
 2463 039f 9F       		.byte	0x9f
 2464 03a0 00000000 		.4byte	0
 2465 03a4 00000000 		.4byte	0
 2466              		.section	.debug_aranges,"",%progbits
 2467 0000 A4000000 		.4byte	0xa4
 2468 0004 0200     		.2byte	0x2
 2469 0006 00000000 		.4byte	.Ldebug_info0
 2470 000a 04       		.byte	0x4
 2471 000b 00       		.byte	0
 2472 000c 0000     		.2byte	0
 2473 000e 0000     		.2byte	0
 2474 0010 00000000 		.4byte	.LFB1
 2475 0014 EC000000 		.4byte	.LFE1-.LFB1
 2476 0018 00000000 		.4byte	.LFB2
 2477 001c 20000000 		.4byte	.LFE2-.LFB2
 2478 0020 00000000 		.4byte	.LFB0
 2479 0024 1C000000 		.4byte	.LFE0-.LFB0
 2480 0028 00000000 		.4byte	.LFB3
 2481 002c 10000000 		.4byte	.LFE3-.LFB3
 2482 0030 00000000 		.4byte	.LFB4
 2483 0034 14000000 		.4byte	.LFE4-.LFB4
 2484 0038 00000000 		.4byte	.LFB5
 2485 003c 14000000 		.4byte	.LFE5-.LFB5
 2486 0040 00000000 		.4byte	.LFB6
 2487 0044 28000000 		.4byte	.LFE6-.LFB6
 2488 0048 00000000 		.4byte	.LFB7
 2489 004c 20000000 		.4byte	.LFE7-.LFB7
 2490 0050 00000000 		.4byte	.LFB8
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 61


 2491 0054 10000000 		.4byte	.LFE8-.LFB8
 2492 0058 00000000 		.4byte	.LFB9
 2493 005c 18000000 		.4byte	.LFE9-.LFB9
 2494 0060 00000000 		.4byte	.LFB10
 2495 0064 18000000 		.4byte	.LFE10-.LFB10
 2496 0068 00000000 		.4byte	.LFB11
 2497 006c 10000000 		.4byte	.LFE11-.LFB11
 2498 0070 00000000 		.4byte	.LFB12
 2499 0074 10000000 		.4byte	.LFE12-.LFB12
 2500 0078 00000000 		.4byte	.LFB13
 2501 007c 1C000000 		.4byte	.LFE13-.LFB13
 2502 0080 00000000 		.4byte	.LFB14
 2503 0084 1C000000 		.4byte	.LFE14-.LFB14
 2504 0088 00000000 		.4byte	.LFB15
 2505 008c 50000000 		.4byte	.LFE15-.LFB15
 2506 0090 00000000 		.4byte	.LFB16
 2507 0094 40000000 		.4byte	.LFE16-.LFB16
 2508 0098 00000000 		.4byte	.LFB17
 2509 009c 48000000 		.4byte	.LFE17-.LFB17
 2510 00a0 00000000 		.4byte	0
 2511 00a4 00000000 		.4byte	0
 2512              		.section	.debug_ranges,"",%progbits
 2513              	.Ldebug_ranges0:
 2514 0000 00000000 		.4byte	.LFB1
 2515 0004 EC000000 		.4byte	.LFE1
 2516 0008 00000000 		.4byte	.LFB2
 2517 000c 20000000 		.4byte	.LFE2
 2518 0010 00000000 		.4byte	.LFB0
 2519 0014 1C000000 		.4byte	.LFE0
 2520 0018 00000000 		.4byte	.LFB3
 2521 001c 10000000 		.4byte	.LFE3
 2522 0020 00000000 		.4byte	.LFB4
 2523 0024 14000000 		.4byte	.LFE4
 2524 0028 00000000 		.4byte	.LFB5
 2525 002c 14000000 		.4byte	.LFE5
 2526 0030 00000000 		.4byte	.LFB6
 2527 0034 28000000 		.4byte	.LFE6
 2528 0038 00000000 		.4byte	.LFB7
 2529 003c 20000000 		.4byte	.LFE7
 2530 0040 00000000 		.4byte	.LFB8
 2531 0044 10000000 		.4byte	.LFE8
 2532 0048 00000000 		.4byte	.LFB9
 2533 004c 18000000 		.4byte	.LFE9
 2534 0050 00000000 		.4byte	.LFB10
 2535 0054 18000000 		.4byte	.LFE10
 2536 0058 00000000 		.4byte	.LFB11
 2537 005c 10000000 		.4byte	.LFE11
 2538 0060 00000000 		.4byte	.LFB12
 2539 0064 10000000 		.4byte	.LFE12
 2540 0068 00000000 		.4byte	.LFB13
 2541 006c 1C000000 		.4byte	.LFE13
 2542 0070 00000000 		.4byte	.LFB14
 2543 0074 1C000000 		.4byte	.LFE14
 2544 0078 00000000 		.4byte	.LFB15
 2545 007c 50000000 		.4byte	.LFE15
 2546 0080 00000000 		.4byte	.LFB16
 2547 0084 40000000 		.4byte	.LFE16
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 62


 2548 0088 00000000 		.4byte	.LFB17
 2549 008c 48000000 		.4byte	.LFE17
 2550 0090 00000000 		.4byte	0
 2551 0094 00000000 		.4byte	0
 2552              		.section	.debug_line,"",%progbits
 2553              	.Ldebug_line0:
 2554 0000 F2020000 		.section	.debug_str,"MS",%progbits,1
 2554      02004D00 
 2554      00000201 
 2554      FB0E0D00 
 2554      01010101 
 2555              	.LASF11:
 2556 0000 75696E74 		.ascii	"uint16\000"
 2556      313600
 2557              	.LASF61:
 2558 0007 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2558      4320342E 
 2558      392E3320 
 2558      32303135 
 2558      30333033 
 2559 003a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2559      20726576 
 2559      6973696F 
 2559      6E203232 
 2559      31323230 
 2560 006d 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 2560      66756E63 
 2560      74696F6E 
 2560      2D736563 
 2560      74696F6E 
 2561              	.LASF47:
 2562 0095 61646347 		.ascii	"adcGain\000"
 2562      61696E00 
 2563              	.LASF24:
 2564 009d 636F756E 		.ascii	"counts\000"
 2564      747300
 2565              	.LASF53:
 2566 00a4 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2566      436F756E 
 2566      7473546F 
 2566      5F566F6C 
 2566      747300
 2567              	.LASF25:
 2568 00b7 4144435F 		.ascii	"ADC_Init\000"
 2568      496E6974 
 2568      00
 2569              	.LASF0:
 2570 00c0 6C6F6E67 		.ascii	"long long unsigned int\000"
 2570      206C6F6E 
 2570      6720756E 
 2570      7369676E 
 2570      65642069 
 2571              	.LASF28:
 2572 00d7 4144435F 		.ascii	"ADC_StartConvert\000"
 2572      53746172 
 2572      74436F6E 
 2572      76657274 
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 63


 2572      00
 2573              	.LASF2:
 2574 00e8 6C6F6E67 		.ascii	"long long int\000"
 2574      206C6F6E 
 2574      6720696E 
 2574      7400
 2575              	.LASF4:
 2576 00f6 7369676E 		.ascii	"signed char\000"
 2576      65642063 
 2576      68617200 
 2577              	.LASF30:
 2578 0102 73746174 		.ascii	"status\000"
 2578      757300
 2579              	.LASF14:
 2580 0109 696E7433 		.ascii	"int32\000"
 2580      3200
 2581              	.LASF26:
 2582 010f 4144435F 		.ascii	"ADC_Start\000"
 2582      53746172 
 2582      7400
 2583              	.LASF7:
 2584 0119 6C6F6E67 		.ascii	"long int\000"
 2584      20696E74 
 2584      00
 2585              	.LASF51:
 2586 0122 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2586      436F756E 
 2586      7473546F 
 2586      5F75566F 
 2586      6C747300 
 2587              	.LASF58:
 2588 0136 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2588      636F756E 
 2588      74735065 
 2588      72313056 
 2588      6F6C7400 
 2589              	.LASF10:
 2590 014a 75696E74 		.ascii	"uint8\000"
 2590      3800
 2591              	.LASF60:
 2592 0150 43794465 		.ascii	"CyDelayUs\000"
 2592      6C617955 
 2592      7300
 2593              	.LASF16:
 2594 015a 646F7562 		.ascii	"double\000"
 2594      6C6500
 2595              	.LASF12:
 2596 0161 75696E74 		.ascii	"uint32\000"
 2596      333200
 2597              	.LASF37:
 2598 0168 6D61736B 		.ascii	"mask\000"
 2598      00
 2599              	.LASF56:
 2600 016d 4144435F 		.ascii	"ADC_initVar\000"
 2600      696E6974 
 2600      56617200 
 2601              	.LASF33:
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 64


 2602 0179 7265744D 		.ascii	"retMode\000"
 2602      6F646500 
 2603              	.LASF42:
 2604 0181 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2604      5365744C 
 2604      696D6974 
 2604      4D61736B 
 2604      00
 2605              	.LASF9:
 2606 0192 756E7369 		.ascii	"unsigned int\000"
 2606      676E6564 
 2606      20696E74 
 2606      00
 2607              	.LASF52:
 2608 019f 75566F6C 		.ascii	"uVolts\000"
 2608      747300
 2609              	.LASF8:
 2610 01a6 6C6F6E67 		.ascii	"long unsigned int\000"
 2610      20756E73 
 2610      69676E65 
 2610      6420696E 
 2610      7400
 2611              	.LASF43:
 2612 01b8 4144435F 		.ascii	"ADC_SetSatMask\000"
 2612      53657453 
 2612      61744D61 
 2612      736B00
 2613              	.LASF54:
 2614 01c7 766F6C74 		.ascii	"volts\000"
 2614      7300
 2615              	.LASF23:
 2616 01cd 746D7052 		.ascii	"tmpRegVal\000"
 2616      65675661 
 2616      6C00
 2617              	.LASF6:
 2618 01d7 73686F72 		.ascii	"short unsigned int\000"
 2618      7420756E 
 2618      7369676E 
 2618      65642069 
 2618      6E7400
 2619              	.LASF63:
 2620 01ea 433A5C55 		.ascii	"C:\\Users\\Vit\\Documents\\PSoC Creator\\SensorTest"
 2620      73657273 
 2620      5C566974 
 2620      5C446F63 
 2620      756D656E 
 2621 0218 5C53656E 		.ascii	"\\SensorTest.cydsn\000"
 2621      736F7254 
 2621      6573742E 
 2621      63796473 
 2621      6E00
 2622              	.LASF65:
 2623 022a 4379496E 		.ascii	"CyIntSetVector\000"
 2623      74536574 
 2623      56656374 
 2623      6F7200
 2624              	.LASF29:
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 65


 2625 0239 4144435F 		.ascii	"ADC_StopConvert\000"
 2625      53746F70 
 2625      436F6E76 
 2625      65727400 
 2626              	.LASF50:
 2627 0249 6D566F6C 		.ascii	"mVolts\000"
 2627      747300
 2628              	.LASF19:
 2629 0250 72656733 		.ascii	"reg32\000"
 2629      3200
 2630              	.LASF15:
 2631 0256 666C6F61 		.ascii	"float32\000"
 2631      74333200 
 2632              	.LASF21:
 2633 025e 73697A65 		.ascii	"sizetype\000"
 2633      74797065 
 2633      00
 2634              	.LASF39:
 2635 0267 6C6F774C 		.ascii	"lowLimit\000"
 2635      696D6974 
 2635      00
 2636              	.LASF40:
 2637 0270 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2637      53657448 
 2637      6967684C 
 2637      696D6974 
 2637      00
 2638              	.LASF31:
 2639 0281 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2639      4973456E 
 2639      64436F6E 
 2639      76657273 
 2639      696F6E00 
 2640              	.LASF17:
 2641 0295 696E7436 		.ascii	"int64\000"
 2641      3400
 2642              	.LASF59:
 2643 029b 4379496E 		.ascii	"CyIntSetPriority\000"
 2643      74536574 
 2643      5072696F 
 2643      72697479 
 2643      00
 2644              	.LASF36:
 2645 02ac 4144435F 		.ascii	"ADC_SetChanMask\000"
 2645      53657443 
 2645      68616E4D 
 2645      61736B00 
 2646              	.LASF46:
 2647 02bc 4144435F 		.ascii	"ADC_SetGain\000"
 2647      53657447 
 2647      61696E00 
 2648              	.LASF1:
 2649 02c8 666C6F61 		.ascii	"float\000"
 2649      7400
 2650              	.LASF41:
 2651 02ce 68696768 		.ascii	"highLimit\000"
 2651      4C696D69 
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 66


 2651      7400
 2652              	.LASF48:
 2653 02d8 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2653      436F756E 
 2653      7473546F 
 2653      5F6D566F 
 2653      6C747300 
 2654              	.LASF38:
 2655 02ec 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2655      5365744C 
 2655      6F774C69 
 2655      6D697400 
 2656              	.LASF66:
 2657 02fc 43794861 		.ascii	"CyHalt\000"
 2657      6C7400
 2658              	.LASF62:
 2659 0303 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2659      6E657261 
 2659      7465645F 
 2659      536F7572 
 2659      63655C50 
 2660              	.LASF5:
 2661 0322 756E7369 		.ascii	"unsigned char\000"
 2661      676E6564 
 2661      20636861 
 2661      7200
 2662              	.LASF57:
 2663 0330 4144435F 		.ascii	"ADC_offset\000"
 2663      6F666673 
 2663      657400
 2664              	.LASF3:
 2665 033b 73686F72 		.ascii	"short int\000"
 2665      7420696E 
 2665      7400
 2666              	.LASF27:
 2667 0345 4144435F 		.ascii	"ADC_Stop\000"
 2667      53746F70 
 2667      00
 2668              	.LASF22:
 2669 034e 63684E75 		.ascii	"chNum\000"
 2669      6D00
 2670              	.LASF34:
 2671 0354 6368616E 		.ascii	"chan\000"
 2671      00
 2672              	.LASF18:
 2673 0359 63686172 		.ascii	"char\000"
 2673      00
 2674              	.LASF20:
 2675 035e 63796973 		.ascii	"cyisraddress\000"
 2675      72616464 
 2675      72657373 
 2675      00
 2676              	.LASF55:
 2677 036b 4144435F 		.ascii	"ADC_channelsConfig\000"
 2677      6368616E 
 2677      6E656C73 
 2677      436F6E66 
ARM GAS  C:\Users\Vit\AppData\Local\Temp\ccS8N11h.s 			page 67


 2677      696700
 2678              	.LASF45:
 2679 037e 6F666673 		.ascii	"offset\000"
 2679      657400
 2680              	.LASF49:
 2681 0385 61646343 		.ascii	"adcCounts\000"
 2681      6F756E74 
 2681      7300
 2682              	.LASF64:
 2683 038f 4144435F 		.ascii	"ADC_Enable\000"
 2683      456E6162 
 2683      6C6500
 2684              	.LASF13:
 2685 039a 696E7431 		.ascii	"int16\000"
 2685      3600
 2686              	.LASF44:
 2687 03a0 4144435F 		.ascii	"ADC_SetOffset\000"
 2687      5365744F 
 2687      66667365 
 2687      7400
 2688              	.LASF35:
 2689 03ae 72657375 		.ascii	"result\000"
 2689      6C7400
 2690              	.LASF32:
 2691 03b5 4144435F 		.ascii	"ADC_GetResult16\000"
 2691      47657452 
 2691      6573756C 
 2691      74313600 
 2692              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
